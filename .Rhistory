genes <- genes[!duplicated(genes$GENEID),]
#data frame of gene annotations is added back to the DGEList
x$genes <- genes
x
#need to remove the columns at the bottom that say no feature, alignment not unique, or ambiguous
#myData <- x[-c("__no_feature", "__ambiguous", "__alignment_not_unique"), ]
#newdata <- x(!(x$counts %in% c("__no_feature", "__ambiguous", "__alignment_not_unique"))
#updated_myData <- subset(x, id %in% c("__no_feature", "__ambiguous", "__alignment_not_unique"))
#updated_myData <- subset(x, id %in% c(4064, 4065, 4066))
#id <- rownames(x$counts)
#myData = x[!id > 4,] # equal to myData[myData$A <= 4,]
#x <- cbind(x$counts, id)
#genome <- BSgenome.Scerevisiae.UCSC.sacCer3
#columns(genome)
#biocLite("AnnotationHub")
#library(AnnotationHub)
#ah <- AnnotationHub()
##genome <- BSgenome.Scerevisiae.UCSC.sacCer3
#genome$chrI
#qh <- query(ah, c("sacCer2","genes"))
#qh
#genes2 <- qh[[which(qh$title == "SGD Genes")]]
#genes2
#genes <- select(genes, keys=geneid, columns="seqnames","name",keytype="name")
#unique(ah$dataprovider)
#ens <- query(ah, "Ensembl")
#ens
#ens <- subset(ah, ah$dataprovider=="Ensembl")
#ens
#ens$species
#yeast <-  query(ens, "Saccharoymces cerevisiae")
#yeast
#orgs <- subset(ah, ah$rdataclass == "OrgDb")
#orgs
#yeast <- query(orgs, "Saccharomyces cerevisiae")[[1]]
#columns(yeast)
#keytypes(yeast)
#head(keys(yeast, keytype="GENENAME"))
#head(keys(yeast, keytype="ENSEMBL"))
#head(keys(yeast, keytype="ENSEMBLTRANS"))
#head(keys(yeast, keytype="ALIAS"))
#head(keys(yeast, keytype="UNIPROT"))
#geneid <- rownames(x)
#genes <- select(yeast, keys=geneid, columns="SGD","ENSEMBL","GENENAME",keytype="GENENAME")
#dim(genes)
#head(genes)
#get rid of any duplicate genes (mapping to different chromosomes)
#data frame of gene annotations is added back to the DGEList
x$genes <- genes
x
#data pre-processing
cpm <- cpm(x)
lcpm <- cpm(x,log=TRUE)
lcpm
#remove genes that are lowly expressed in all samples (ie not expressed in any)
table(rowSums(x$counts==0)==87)
#only keep genes that are expressed in at least one group (group size=3 in this case)
table(rowSums(cpm>1)>=3)
keep.exprs <- rowSums(cpm>1)>=3
x <- x[keep.exprs,,keep.lib.sizes=FALSE]
dim(x)
#make graphs to compare raw versus filtered data
library(RColorBrewer)
nsamples <- ncol(x)
col <- brewer.pal(nsamples,"Paired")
{par(mfrow=c(1,2))
plot(density(lcpm[,1]),col=col[1],lwd=2,ylim=c(0,0.21),las=2,main="",xlab="")
title(main="A. Raw Data", xlab="Log-cpm")
abline(v=0,lty=3)
for(i in 2:nsamples) {
den <- density(lcpm[,i])
lines(den$x,den$y,col=col[i],lwd=2)
}
legend("topright",samplenames1, text.col=col, bty="n",cex=0.4,ncol=4)
lcpm <- cpm(x, log=TRUE)
plot(density(lcpm[,1]),col=col[1],lwd=2,ylim=c(0,0.21),las=2,main="",xlab="")
title(main="B. Filtered Data", xlab="log-cpm")
abline(v=0, lty=3)
for (i in 2:nsamples) {
den <- density(lcpm[,i])
lines(den$x,den$y,col=col[i],lwd=2)
}
legend("topright",samplenames1,text.col=col,bty="n",cex=0.4,ncol=4)
}
#normalization
x <- calcNormFactors(x, method="TMM")
x$samples
x
#visually see the data normalized by screwing with the data artificially to make it look a lot different
x3 <- x
x3$samples$norm.factors <- 1
x3$counts[,1] <- ceiling(x3$counts[,1]*0.05)
x3$counts[,2] <- x$counts[,2]*5
par(mfrow=c(1,2))
{
par(mfrow=c(1,2))
lcpm <- cpm(x3,log=TRUE)
boxplot(lcpm,las=2,col=col,main="")
title(main="A. Example: unnormalized data",ylab="Log-cpm")
x4 <- calcNormFactors(x3)
lcpm.4 <- cpm(x4, log=TRUE)
boxplot(lcpm.4,las=2, col=col, main="")
title(main="B. Example: normalized data", ylab="Log-cpm")
}
glMDSPlot(lcpm, labels=paste(exp,run,sep="_"),groups=x$samples[,c(2,5)], launch=TRUE)
glMDSPlot(lcpm, labels=paste(run,exp,sep="_"),groups=x$samples[,c(2,5)], launch=TRUE)
x$samples[,c(2,5)]
files <- list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/4_3_18",pattern = "*.txt", full.names = TRUE)
files
#load in edgeR and limma
library(limma)
library(edgeR)
library(dplyr)
#load in data from files using readDGE from edgeR
#getting out just the EntrezID and read count, neglecting genelength
x <- readDGE(files,columns=c(1,2))
##After looking at MDS plots, I decided to remove one replicate of line 112 since it is an extreme outlier compared to everything else.
#check the parameters
class(x)
#and dimensions
dim(x)
files
#organize sample information
#change sample names so they are simpler
samplenames1 <- c("M112B","M112C","M115B","M115C","M117B","M117C","G11B","G11C","M123B","M123C","M141B","M141C","M152B","M152C","G18B","G18C","G1B","G1C","G11A","G21C","M29B","M29C","G2A","G2B","G2C","G31B","G31C","G3A","G3B","G3C","G49B","G49C","G4B","G4C","M50B","G59B","G59C","G5A","G5B","G5C","G61B","G61C","G66C","G69B","G69C","G6A","G6B","G6C","G76B","G76C","G77B","77C","G7B","G7C","G8B","G8C","G9A","G9B","G9C","GAB","GAC","66B","18A","21A","31A","G4A","49A","61A","G7A","G8A","MAC","M1A","M1B","M1C","M2A","M2B","M2C","M3A","M3B","M3C","M4A","M4B","M4C","M5A","M5B","M5C","M6A","M6C","M6B","M7A","M7B","M7C","M8A","M8B","M8C","M9A","M9B","M9C","M11A","M11B","M11C","15A","15B","15C","28A","28B","28C","88A","88B","88C","108A","108B","108C","119A","119B","119C","OMAA","OMAB","OMAC")
length(samplenames1)
colnames(x) <-samplenames1
#group samples together according to experiment
x
View(x$samples)
#group <- as.factor(c("M112","M112","M115","M115","M117","M117","G11","G11","M123","M123","M141","M141","M152","M152","G18","G18","G1","G1","G11","G21","M29","M29","G2","G2","G2","G31","G31","G3","G3","G3","G49","G49","G4","G4","M50","G59","G59","G5","G5","G5","G61","G61","G66","G69","G69","G6","G6","G6","G76","G76","G77","G77","G7","G7","G8","G8","G9","G9","G9","GA","GA","G66","G18","G21","G31","G4","G49","G61","G7","G8","MA","M1","M1","M1","M2","M2","M2","M3","M3","M3","M4","M4","M4","M5","M5","M5","M6","M6","M6","M7","M7","M7","M8","M8","M8","M9","M9","M9","M11","M11","M11","M15","M15","M15","M28","M28","M28","M88","M88","M88","M108","M108","M108","M119","M119","M119","OMA","OMA","OMA"))
length(group)
#x$samples$group <- group
exp <- as.factor(rep(c("MA","GC","MA","GC","MA","GC","MA","GC","MA"), c(6,2,6,6,2,12,1,35,49)))
x$samples$exp <- exp
#come back to this later
#run <- as.factor(rep(c(1,2), c(70,49)))
#x$samples$run <- run
group <- as.factor(rep(c(1,2), c(70,49)))
x$samples$group <- group
#ploidy <- as.factor(rep(c("tri","eu","tri","dbl","eu","tri","dbl","tri","eu","tri","mon","eu","eu","eu","tri","eu","eu","tri","eu","tri","seg","eu","eu","tri","tri","eu","eu","eu","eu","eu"),c(2,3,3,2,3,3,3,3,3,2,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3)))
#x$samples$ploidy <- ploidy
#x$samples
#organize the gene annotations
#install mus.musuclus package
#source("https://bioconductor.org/biocLite.R")
#biocLite("BSgenome.Scerevisiae.UCSC.sacCer3")
#library(BSgenome.Scerevisiae.UCSC.sacCer3)
#geneid <- rownames(x)
#genes <- select(BSgenome.Scerevisiae.UCSC.sacCer3, keys=geneid, columns="SYMBOL","TXCHROM",keytype="GENENAME")
#dim(genes)
#head(genes)
#biocLite("BSgenome.Scerevisiae.UCSC.sacCer1")
#library(BSgenome.Scerevisiae.UCSC.sacCer1)
#genes <- select(BSgenome.Scerevisiae.UCSC.sacCer3, keys=geneid, columns="SYMBOL","TXCHROM",keytype="GENENAME")
#source("https://bioconductor.org/biocLite.R")
#biocLite("OrganismDbi")
#library(OrganismDbi)
#source("https://bioconductor.org/biocLite.R")
#biocLite("org.Sc.sgd.db")
library(org.Sc.sgd.db)
org.Sc.sgd.db
yeast <- org.Sc.sgd.db
keytypes(yeast)
columns(yeast)
#genes <- select(org.Sc.sgd.db, keys=geneid, columns="TXCHR","CHRLENGTHS","ENSEMBL",keytype="GENENAME")
#biocLite("TxDb.Scerevisiae.UCSC.sacCer2.sgdGene")
library(TxDb.Scerevisiae.UCSC.sacCer2.sgdGene)
txdb <- TxDb.Scerevisiae.UCSC.sacCer2.sgdGene
txdb
txs <- transcripts(txdb)
txs
txby <- transcriptsBy(txdb,by="gene")
txby
si <- seqinfo(txdb)
si
txby <- transcriptsBy(txdb, by="gene")
si <- seqinfo(txby)
si
head(seqlevels(txdb))
seqlevelsStyle(txdb)
seqlevelsStyle(txdb) <- "ensembl"
head(seqlevels(txdb))
seqlevelsStyle(txdb) <- "UCSC"
head(seqlevels(txdb))
#want to ignore the mitochondria
isActiveSeq(txdb)["chrM"] <- FALSE
head(isActiveSeq(txdb), n=18)
#and 2 micron
isActiveSeq(txdb)["2micron"] <- FALSE
head(isActiveSeq(txdb), n=18)
columns(txdb)
#want TXCHROM
#want GENEID
geneid <- rownames(x)
genes <- select(txdb, keys=geneid, columns="TXCHROM","GENEID",keytype="GENEID")
genes
genes <- genes[!duplicated(genes$GENEID),]
#data frame of gene annotations is added back to the DGEList
x$genes <- genes
x
#need to remove the columns at the bottom that say no feature, alignment not unique, or ambiguous
#myData <- x[-c("__no_feature", "__ambiguous", "__alignment_not_unique"), ]
#newdata <- x(!(x$counts %in% c("__no_feature", "__ambiguous", "__alignment_not_unique"))
#updated_myData <- subset(x, id %in% c("__no_feature", "__ambiguous", "__alignment_not_unique"))
#updated_myData <- subset(x, id %in% c(4064, 4065, 4066))
#id <- rownames(x$counts)
#myData = x[!id > 4,] # equal to myData[myData$A <= 4,]
#x <- cbind(x$counts, id)
#genome <- BSgenome.Scerevisiae.UCSC.sacCer3
#columns(genome)
#biocLite("AnnotationHub")
#library(AnnotationHub)
#ah <- AnnotationHub()
##genome <- BSgenome.Scerevisiae.UCSC.sacCer3
#genome$chrI
#qh <- query(ah, c("sacCer2","genes"))
#qh
#genes2 <- qh[[which(qh$title == "SGD Genes")]]
#genes2
#genes <- select(genes, keys=geneid, columns="seqnames","name",keytype="name")
#unique(ah$dataprovider)
#ens <- query(ah, "Ensembl")
#ens
#ens <- subset(ah, ah$dataprovider=="Ensembl")
#ens
#ens$species
#yeast <-  query(ens, "Saccharoymces cerevisiae")
#yeast
#orgs <- subset(ah, ah$rdataclass == "OrgDb")
#orgs
#yeast <- query(orgs, "Saccharomyces cerevisiae")[[1]]
#columns(yeast)
#keytypes(yeast)
#head(keys(yeast, keytype="GENENAME"))
#head(keys(yeast, keytype="ENSEMBL"))
#head(keys(yeast, keytype="ENSEMBLTRANS"))
#head(keys(yeast, keytype="ALIAS"))
#head(keys(yeast, keytype="UNIPROT"))
#geneid <- rownames(x)
#genes <- select(yeast, keys=geneid, columns="SGD","ENSEMBL","GENENAME",keytype="GENENAME")
#dim(genes)
#head(genes)
#get rid of any duplicate genes (mapping to different chromosomes)
#data frame of gene annotations is added back to the DGEList
x$genes <- genes
x
#data pre-processing
cpm <- cpm(x)
lcpm <- cpm(x,log=TRUE)
lcpm
#remove genes that are lowly expressed in all samples (ie not expressed in any)
table(rowSums(x$counts==0)==87)
#only keep genes that are expressed in at least one group (group size=3 in this case)
table(rowSums(cpm>1)>=3)
keep.exprs <- rowSums(cpm>1)>=3
x <- x[keep.exprs,,keep.lib.sizes=FALSE]
dim(x)
#make graphs to compare raw versus filtered data
library(RColorBrewer)
nsamples <- ncol(x)
col <- brewer.pal(nsamples,"Paired")
{par(mfrow=c(1,2))
plot(density(lcpm[,1]),col=col[1],lwd=2,ylim=c(0,0.21),las=2,main="",xlab="")
title(main="A. Raw Data", xlab="Log-cpm")
abline(v=0,lty=3)
for(i in 2:nsamples) {
den <- density(lcpm[,i])
lines(den$x,den$y,col=col[i],lwd=2)
}
legend("topright",samplenames1, text.col=col, bty="n",cex=0.4,ncol=4)
lcpm <- cpm(x, log=TRUE)
plot(density(lcpm[,1]),col=col[1],lwd=2,ylim=c(0,0.21),las=2,main="",xlab="")
title(main="B. Filtered Data", xlab="log-cpm")
abline(v=0, lty=3)
for (i in 2:nsamples) {
den <- density(lcpm[,i])
lines(den$x,den$y,col=col[i],lwd=2)
}
legend("topright",samplenames1,text.col=col,bty="n",cex=0.4,ncol=4)
}
#normalization
x <- calcNormFactors(x, method="TMM")
x$samples
x
#visually see the data normalized by screwing with the data artificially to make it look a lot different
x3 <- x
x3$samples$norm.factors <- 1
x3$counts[,1] <- ceiling(x3$counts[,1]*0.05)
x3$counts[,2] <- x$counts[,2]*5
par(mfrow=c(1,2))
{
par(mfrow=c(1,2))
lcpm <- cpm(x3,log=TRUE)
boxplot(lcpm,las=2,col=col,main="")
title(main="A. Example: unnormalized data",ylab="Log-cpm")
x4 <- calcNormFactors(x3)
lcpm.4 <- cpm(x4, log=TRUE)
boxplot(lcpm.4,las=2, col=col, main="")
title(main="B. Example: normalized data", ylab="Log-cpm")
}
col.group <- group
col.group <- as.character(col.group)
levels(col.group) <- brewer.pal(nlevels(col.group), "Blues")
glMDSPlot(lcpm, labels=paste(group,run,sep="_"),groups=x$samples[,c(2,5)], launch=TRUE)
files <- list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/4_3_18",pattern = "*.txt", full.names = TRUE)
files
#load in edgeR and limma
library(limma)
library(edgeR)
library(dplyr)
#load in data from files using readDGE from edgeR
#getting out just the EntrezID and read count, neglecting genelength
x <- readDGE(files,columns=c(1,2))
##After looking at MDS plots, I decided to remove one replicate of line 112 since it is an extreme outlier compared to everything else.
#check the parameters
class(x)
#and dimensions
dim(x)
files
#organize sample information
#change sample names so they are simpler
samplenames1 <- c("M112B","M112C","M115B","M115C","M117B","M117C","G11B","G11C","M123B","M123C","M141B","M141C","M152B","M152C","G18B","G18C","G1B","G1C","G11A","G21C","M29B","M29C","G2A","G2B","G2C","G31B","G31C","G3A","G3B","G3C","G49B","G49C","G4B","G4C","M50B","G59B","G59C","G5A","G5B","G5C","G61B","G61C","G66C","G69B","G69C","G6A","G6B","G6C","G76B","G76C","G77B","77C","G7B","G7C","G8B","G8C","G9A","G9B","G9C","GAB","GAC","66B","18A","21A","31A","G4A","49A","61A","G7A","G8A","MAC","M1A","M1B","M1C","M2A","M2B","M2C","M3A","M3B","M3C","M4A","M4B","M4C","M5A","M5B","M5C","M6A","M6C","M6B","M7A","M7B","M7C","M8A","M8B","M8C","M9A","M9B","M9C","M11A","M11B","M11C","15A","15B","15C","28A","28B","28C","88A","88B","88C","108A","108B","108C","119A","119B","119C","OMAA","OMAB","OMAC")
length(samplenames1)
colnames(x) <-samplenames1
#group samples together according to experiment
x
View(x$samples)
group <- as.factor(c("M112","M112","M115","M115","M117","M117","G11","G11","M123","M123","M141","M141","M152","M152","G18","G18","G1","G1","G11","G21","M29","M29","G2","G2","G2","G31","G31","G3","G3","G3","G49","G49","G4","G4","M50","G59","G59","G5","G5","G5","G61","G61","G66","G69","G69","G6","G6","G6","G76","G76","G77","G77","G7","G7","G8","G8","G9","G9","G9","GA","GA","G66","G18","G21","G31","G4","G49","G61","G7","G8","MA","M1","M1","M1","M2","M2","M2","M3","M3","M3","M4","M4","M4","M5","M5","M5","M6","M6","M6","M7","M7","M7","M8","M8","M8","M9","M9","M9","M11","M11","M11","M15","M15","M15","M28","M28","M28","M88","M88","M88","M108","M108","M108","M119","M119","M119","OMA","OMA","OMA"))
length(group)
x$samples$group <- group
exp <- as.factor(rep(c("MA","GC","MA","GC","MA","GC","MA","GC","MA"), c(6,2,6,6,2,12,1,35,49)))
x$samples$exp <- exp
#come back to this later
#run <- as.factor(rep(c(1,2), c(70,49)))
#x$samples$run <- run
run <- as.factor(rep(c(1,2), c(70,49)))
x$samples$run <- run
#ploidy <- as.factor(rep(c("tri","eu","tri","dbl","eu","tri","dbl","tri","eu","tri","mon","eu","eu","eu","tri","eu","eu","tri","eu","tri","seg","eu","eu","tri","tri","eu","eu","eu","eu","eu"),c(2,3,3,2,3,3,3,3,3,2,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3)))
#x$samples$ploidy <- ploidy
#x$samples
#organize the gene annotations
#install mus.musuclus package
#source("https://bioconductor.org/biocLite.R")
#biocLite("BSgenome.Scerevisiae.UCSC.sacCer3")
#library(BSgenome.Scerevisiae.UCSC.sacCer3)
#geneid <- rownames(x)
#genes <- select(BSgenome.Scerevisiae.UCSC.sacCer3, keys=geneid, columns="SYMBOL","TXCHROM",keytype="GENENAME")
#dim(genes)
#head(genes)
#biocLite("BSgenome.Scerevisiae.UCSC.sacCer1")
#library(BSgenome.Scerevisiae.UCSC.sacCer1)
#genes <- select(BSgenome.Scerevisiae.UCSC.sacCer3, keys=geneid, columns="SYMBOL","TXCHROM",keytype="GENENAME")
#source("https://bioconductor.org/biocLite.R")
#biocLite("OrganismDbi")
#library(OrganismDbi)
#source("https://bioconductor.org/biocLite.R")
#biocLite("org.Sc.sgd.db")
library(org.Sc.sgd.db)
org.Sc.sgd.db
yeast <- org.Sc.sgd.db
keytypes(yeast)
columns(yeast)
#genes <- select(org.Sc.sgd.db, keys=geneid, columns="TXCHR","CHRLENGTHS","ENSEMBL",keytype="GENENAME")
#biocLite("TxDb.Scerevisiae.UCSC.sacCer2.sgdGene")
library(TxDb.Scerevisiae.UCSC.sacCer2.sgdGene)
txdb <- TxDb.Scerevisiae.UCSC.sacCer2.sgdGene
txdb
txs <- transcripts(txdb)
txs
txby <- transcriptsBy(txdb,by="gene")
txby
si <- seqinfo(txdb)
si
txby <- transcriptsBy(txdb, by="gene")
si <- seqinfo(txby)
si
head(seqlevels(txdb))
seqlevelsStyle(txdb)
seqlevelsStyle(txdb) <- "ensembl"
head(seqlevels(txdb))
seqlevelsStyle(txdb) <- "UCSC"
head(seqlevels(txdb))
#want to ignore the mitochondria
isActiveSeq(txdb)["chrM"] <- FALSE
head(isActiveSeq(txdb), n=18)
#and 2 micron
isActiveSeq(txdb)["2micron"] <- FALSE
head(isActiveSeq(txdb), n=18)
columns(txdb)
#want TXCHROM
#want GENEID
geneid <- rownames(x)
genes <- select(txdb, keys=geneid, columns="TXCHROM","GENEID",keytype="GENEID")
genes
genes <- genes[!duplicated(genes$GENEID),]
#data frame of gene annotations is added back to the DGEList
x$genes <- genes
x
#need to remove the columns at the bottom that say no feature, alignment not unique, or ambiguous
#myData <- x[-c("__no_feature", "__ambiguous", "__alignment_not_unique"), ]
#newdata <- x(!(x$counts %in% c("__no_feature", "__ambiguous", "__alignment_not_unique"))
#updated_myData <- subset(x, id %in% c("__no_feature", "__ambiguous", "__alignment_not_unique"))
#updated_myData <- subset(x, id %in% c(4064, 4065, 4066))
#id <- rownames(x$counts)
#myData = x[!id > 4,] # equal to myData[myData$A <= 4,]
#x <- cbind(x$counts, id)
#genome <- BSgenome.Scerevisiae.UCSC.sacCer3
#columns(genome)
#biocLite("AnnotationHub")
#library(AnnotationHub)
#ah <- AnnotationHub()
##genome <- BSgenome.Scerevisiae.UCSC.sacCer3
#genome$chrI
#qh <- query(ah, c("sacCer2","genes"))
#qh
#genes2 <- qh[[which(qh$title == "SGD Genes")]]
#genes2
#genes <- select(genes, keys=geneid, columns="seqnames","name",keytype="name")
#unique(ah$dataprovider)
#ens <- query(ah, "Ensembl")
#ens
#ens <- subset(ah, ah$dataprovider=="Ensembl")
#ens
#ens$species
#yeast <-  query(ens, "Saccharoymces cerevisiae")
#yeast
#orgs <- subset(ah, ah$rdataclass == "OrgDb")
#orgs
#yeast <- query(orgs, "Saccharomyces cerevisiae")[[1]]
#columns(yeast)
#keytypes(yeast)
#head(keys(yeast, keytype="GENENAME"))
#head(keys(yeast, keytype="ENSEMBL"))
#head(keys(yeast, keytype="ENSEMBLTRANS"))
#head(keys(yeast, keytype="ALIAS"))
#head(keys(yeast, keytype="UNIPROT"))
#geneid <- rownames(x)
#genes <- select(yeast, keys=geneid, columns="SGD","ENSEMBL","GENENAME",keytype="GENENAME")
#dim(genes)
#head(genes)
#get rid of any duplicate genes (mapping to different chromosomes)
#data frame of gene annotations is added back to the DGEList
x$genes <- genes
x
#data pre-processing
cpm <- cpm(x)
lcpm <- cpm(x,log=TRUE)
lcpm
#remove genes that are lowly expressed in all samples (ie not expressed in any)
table(rowSums(x$counts==0)==87)
#only keep genes that are expressed in at least one group (group size=3 in this case)
table(rowSums(cpm>1)>=3)
keep.exprs <- rowSums(cpm>1)>=3
x <- x[keep.exprs,,keep.lib.sizes=FALSE]
dim(x)
#make graphs to compare raw versus filtered data
library(RColorBrewer)
nsamples <- ncol(x)
col <- brewer.pal(nsamples,"Paired")
{par(mfrow=c(1,2))
plot(density(lcpm[,1]),col=col[1],lwd=2,ylim=c(0,0.21),las=2,main="",xlab="")
title(main="A. Raw Data", xlab="Log-cpm")
abline(v=0,lty=3)
for(i in 2:nsamples) {
den <- density(lcpm[,i])
lines(den$x,den$y,col=col[i],lwd=2)
}
legend("topright",samplenames1, text.col=col, bty="n",cex=0.4,ncol=4)
lcpm <- cpm(x, log=TRUE)
plot(density(lcpm[,1]),col=col[1],lwd=2,ylim=c(0,0.21),las=2,main="",xlab="")
title(main="B. Filtered Data", xlab="log-cpm")
abline(v=0, lty=3)
for (i in 2:nsamples) {
den <- density(lcpm[,i])
lines(den$x,den$y,col=col[i],lwd=2)
}
legend("topright",samplenames1,text.col=col,bty="n",cex=0.4,ncol=4)
}
#normalization
x <- calcNormFactors(x, method="TMM")
x$samples
x
#visually see the data normalized by screwing with the data artificially to make it look a lot different
x3 <- x
x3$samples$norm.factors <- 1
x3$counts[,1] <- ceiling(x3$counts[,1]*0.05)
x3$counts[,2] <- x$counts[,2]*5
par(mfrow=c(1,2))
{
par(mfrow=c(1,2))
lcpm <- cpm(x3,log=TRUE)
boxplot(lcpm,las=2,col=col,main="")
title(main="A. Example: unnormalized data",ylab="Log-cpm")
x4 <- calcNormFactors(x3)
lcpm.4 <- cpm(x4, log=TRUE)
boxplot(lcpm.4,las=2, col=col, main="")
title(main="B. Example: normalized data", ylab="Log-cpm")
}
plotMDS(lcpm, labels=group, col=col.group)
title(main="A. Sample groups")
col.group <- group
col.group <- as.character(col.group)
levels(col.group) <- brewer.pal(nlevels(col.group), "Blues")
col.group <- as.character(col.group)
plotMDS(lcpm, labels=group, col=col.group)
col.group <- group
col.group <- as.character(col.group)
levels(col.group) <- brewer.pal(nlevels(col.group), "Blues")
col.group <- as.character(col.group)
col.group <- as.character(col.group)
levels(col.group) <- brewer.pal(nlevels(col.group), "Reds")
