topTags(et1)
topEt1 <- topTags(et1)
summary(dt1 <- decideTests(et1))
et15 <- exactTest(x.MA.TMM,pair=c("SC015","SCA"))
topEt15 <- topTags(et15)
summary(dt15 <- decideTests(et15))
topEt15
et15 <- exactTest(x.MA.TMM,pair=c("SCA","SC015"))
topEt15 <- topTags(et15)
summary(dt15 <- decideTests(et15))
topEt15
et1 <- exactTest(x.MA.TMM,pair=c("SCA","SC001"))
topEt1 <- topTags(et1)
summary(dt1 <- decideTests(et1))
x.MA.TMM$samples$group
levels(x.MA.TMM$samples$group)
sample <- levels(x.MA.TMM$samples$group)
de.genesMA <- matrix(data=NA,nrow=length(sample),ncol=1)
rownames(de.genesM) <- sample
x.MA.TMM <- estimateDisp(x.MA.TMM)
x.MA.TMM$samples$group
et1 <- exactTest(x.MA.TMM,pair=c("SCA","SC001"))
topEt1 <- topTags(et1)
summary(dt1 <- decideTests(et1))
#try on an aneuploid line
et15 <- exactTest(x.MA.TMM,pair=c("SCA","SC015"))
topEt15 <- topTags(et15)
summary(dt15 <- decideTests(et15))
sample <- levels(x.MA.TMM$samples$group)
de.genesMA <- matrix(data=NA,nrow=length(sample),ncol=1)
rownames(de.genesMA) <- sample
View(colData(desGC.loc))
for (i in 1:20) {
res <- results(deGC.loc, contrast = c("condition", lines.GC[i],"GCAnc"), pAdjustMethod = "BH")
pdf(paste("MA_plot_line",lines.GC[i],".pdf",sep=""))
plotMA(res)
de <- sum(res$padj <0.1, na.rm=TRUE)
de.genes[lines.GC[i],] <- de
qs <- c(0, quantile(res$baseMean[res$baseMean > 0],0:7/7))
bins <- cut(res$baseMean, qs)
levels(bins) <- paste0("~",round(.5*qs[-1]+.5*qs[-length(qs)]))
ratios <- tapply(res$pvalue,bins,function(p) mean(p<.1,na.rm=TRUE))
pdf(paste("ratio_p_vals_plot_line",lines.GC[i],".pdf",sep=""))
barplot(ratios,xlab="mean normalized count",ylab="ratio of small p values",main=paste("Line",lines.GC[i],sep=""))
dev.off()
}
for (i in 1:length(sample)) {
et <- exactTest(x.MA.TMM,pair=c("SCA",sample[i]))
#top <- topTags(et15)
de.genesMA[sample[i],] <- summary(dt<- decideTests(et))
}
summary(dt15 <- decideTests(et15))
dt15 <- decideTests(et15)
dt15
de <- summary(dt15 <- decideTests(et15))
de
sample
de1 <-summary(dt1 <- decideTests(et1))
de15 <- summary(dt15 <- decideTests(et15))
et2 <- exactTest(x.MA.TMM,pair=c("SCA","SC002"))
de2 <- summary(dt2 <- decideTests(et2))
de2
et3 <- exactTest(x.MA.TMM,pair=c("SCA","SC003"))
topEt3 <- topTags(et3)
de3 <- summary(dt3 <- decideTests(et3))
de3
et4 <- exactTest(x.MA.TMM,pair=c("SCA","SC004"))
topEt4 <- topTags(et4)
de4 <- summary(dt4 <- decideTests(et4))
de4
et5 <- exactTest(x.MA.TMM,pair=c("SCA","SC005"))
topEt5 <- topTags(et5)
de5 <- summary(dt5 <- decideTests(et5))
de5
et6 <- exactTest(x.MA.TMM,pair=c("SCA","SC006"))
topEt6 <- topTags(et6)
de6 <- summary(dt6 <- decideTests(et6))
de6
et7 <- exactTest(x.MA.TMM,pair=c("SCA","SC007"))
topEt7 <- topTags(et7)
de7 <- summary(dt7 <- decideTests(et7))
de7
et8 <- exactTest(x.MA.TMM,pair=c("SCA","SC008"))
topEt8 <- topTags(et8)
de8 <- summary(dt8 <- decideTests(et8))
de8
View(topEt8)
x.MA
x.MA.TMM <- calcNormFactors(x.MA,method="TMM",refColumn = 48)
View(x.MA.TMM$samples)
x.MA.TMM <- calcNormFactors(x.MA,method="TMM",refColumn = 48,doWeighting = FALSE)
View(x.MA.TMM$samples)
x.MA.TMM <- estimateDisp(x.MA.TMM)
x.MA.TMM$samples$group
et1 <- exactTest(x.MA.TMM,pair=c("SCA","SC001"))
topEt1 <- topTags(et1)
de1 <-summary(dt1 <- decideTests(et1))
summary(dt1 <- decideTests(et1))
et15 <- exactTest(x.MA.TMM,pair=c("SCA","SC015"))
topEt15 <- topTags(et15)
de15 <- summary(dt15 <- decideTests(et15))
summary(dt15 <- decideTests(et15))
et2 <- exactTest(x.MA.TMM,pair=c("SCA","SC002"))
topEt2 <- topTags(et2)
de2 <- summary(dt2 <- decideTests(et2))
de2
et3 <- exactTest(x.MA.TMM,pair=c("SCA","SC003"))
topEt3 <- topTags(et3)
de3 <- summary(dt3 <- decideTests(et3))
de3
et4 <- exactTest(x.MA.TMM,pair=c("SCA","SC004"))
topEt4 <- topTags(et4)
de4 <- summary(dt4 <- decideTests(et4))
de4
et5 <- exactTest(x.MA.TMM,pair=c("SCA","SC005"))
topEt5 <- topTags(et5)
de5 <- summary(dt5 <- decideTests(et5))
de5
et6 <- exactTest(x.MA.TMM,pair=c("SCA","SC006"))
topEt6 <- topTags(et6)
de6 <- summary(dt6 <- decideTests(et6))
de6
et7 <- exactTest(x.MA.TMM,pair=c("SCA","SC007"))
topEt7 <- topTags(et7)
de7 <- summary(dt7 <- decideTests(et7))
de7
et8 <- exactTest(x.MA.TMM,pair=c("SCA","SC008"))
topEt8 <- topTags(et8)
de8 <- summary(dt8 <- decideTests(et8))
de8
x.MA.TMM <- calcNormFactors(x.MA,method="TMM",refColumn = 47,doWeighting = FALSE)
View(x.MA.TMM$samples)
x.MA.no <- calcNormFactors(x.MA,method="none")
x.MA.no <- estimateDisp(x.MA.no)
et1.2 <- exactTest(x.MA.no,pair=c("SCA","SC001"))
topEt1.2 <- topTags(et1.2)
de1.2 <-summary(dt1 <- decideTests(et1.2))
de1.2
et15.2 <- exactTest(x.MA.no,pair=c("SCA","SC015"))
topEt15.2 <- topTags(et15.2)
de15.2 <- summary(dt15 <- decideTests(et15.2))
de15.2
x.MA.TMM <- calcNormFactors(x.MA.TMM)
x.MA.TMM = calcNormFactors(x.MA.TMM)
design = model.matrix(~x.MA.TMM$samples$group)
x.MA.TMM = estimateDisp(x.MA.TMM,design)
et8 <- exactTest(x.MA.TMM,pair=c("SCA","SC008"))
topEt8 <- topTags(et8)
de8 <- summary(dt8 <- decideTests(et8))
de8
design
topEt15.2
de15.2
knitr::opts_chunk$set(echo = TRUE)
counts = read.delim("/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/HTseq_update_May2018/GC/exons_stranded/GC_counts_shrt.txt",header=FALSE)
#load in edgeR and limma
library(limma)
library(Glimma)
library(edgeR)
library(dplyr)
library(TxDb.Scerevisiae.UCSC.sacCer2.sgdGene)
library(RColorBrewer)
library(gplots)
library(magicfor)
library(tidyr)
library(data.table)
library(stringr)
library(ggplot2)
library(plotly)
library(GenomicFeatures)
colnames(counts) = c("1A","1B","1C","2A","2B","2C","3A","3B","4A","4B","4C","5A","5B","5C","6A","6B","6C","7A","7B","7C","8A","8B","8C","9A","9B","9C","11A","11B","11C","18A","18B","18C","21B","21C","31A","31B","31C","49A","49B","49C","59A","59B","59C","61A","61B","61C","76A","76B","76C","77A","77B","77C","AncA","AncB","AncC")
counts = read.delim("/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/HTseq_update_May2018/GC/exons_stranded/GC_counts_shrt.txt",header=FALSE)
counts = read.delim("/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/HTseq_update_May2018/GC/exons_stranded/GC_counts.txt",header=FALSE)
colnames(counts) = c("1A","1B","1C","2A","2B","2C","3A","3B","4A","4B","4C","5A","5B","5C","6A","6B","6C","7A","7B","7C","8A","8B","8C","9A","9B","9C","11A","11B","11C","18A","18B","18C","21B","21C","31A","31B","31C","49A","49B","49C","59A","59B","59C","61A","61B","61C","76A","76B","76C","77A","77B","77C","AncA","AncB","AncC")
my.data <- data.frame(counts)
View(counts)
colnames(counts) = c("geneid","1A","1B","1C","2A","2B","2C","3A","3B","4A","4B","4C","5A","5B","5C","6A","6B","6C","7A","7B","7C","8A","8B","8C","9A","9B","9C","11A","11B","11C","18A","18B","18C","21B","21C","31A","31B","31C","49A","49B","49C","59A","59B","59C","61A","61B","61C","76A","76B","76C","77A","77B","77C","AncA","AncB","AncC")
my.data <- data.frame(counts)
View(counts)
colnames(counts) = c("geneid","1A","1B","1C","2A","2B","2C","3A","3B","4A","4B","4C","5A","5B","5C","6A","6B","6C","7A","7B","7C","8A","8B","8C","9A","9B","9C","11A","11B","11C","18A","18B","18C","21B","21C","31A","31B","31C","49A","49B","49C","59A","59B","59C","61A","61B","61C","69A","69B","69C", "76A","76B","76C","77A","77B","77C","AncA","AncB","AncC")
View(counts)
colnames(counts) = c("geneid","1A","1B","1C","2A","2B","2C","3A","3B","3C","4A","4B","4C","5A","5B","5C","6A","6B","6C","7A","7B","7C","8A","8B","8C","9A","9B","9C","11A","11B","11C","18A","18B","18C","21B","21C","31A","31B","31C","49A","49B","49C","59A","59B","59C","61A","61B","61C","69A","69B","69C", "76A","76B","76C","77A","77B","77C","AncA","AncB","AncC")
my.data <- data.frame(counts)
View(my.data)
all_counts = all_counts[-c(7127,7128,7129,7130,7131),]
all_counts = my.data[-c(7127,7128,7129,7130,7131),]
num_features = length(row.names(my.data))
rownames(my.data) <- my.data$geneid
rm(my.data$geneid)
del(my.data$geneid)
my.data <- subset(my.data, select=-c("geneid"))
my.data <- subset(my.data, select=-c(1))
View(my.data)
group = factor((1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,11,11,11,18,18,18,21,21,31,31,31,49,49,49,59,59,59,61,61,61,69,69,69, 76,76,76,77,77,77,0,0,0))
group = factor(c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,11,11,11,18,18,18,21,21,31,31,31,49,49,49,59,59,59,61,61,61,69,69,69,76,76,76,77,77,77,0,0,0))
dge_list = DGEList(counts = my.data,group = group)
dge_list = calcNormFactors(dge_list)
design = model.matrix(~group)
dge_list = estimateDisp(dge_list,design)
exactTest(dge_list)
diff_exp_1 = exactTest(dge_list,pair=0,1)
diff_exp_1 = exactTest(dge_list,pair=0:1)
diff_exp_1 = exactTest(dge_list,pair="0","1")
diff_exp_1 = exactTest(dge_list,pair=c(0,1))
diff_exp_1 = exactTest(dge_list,pair=c("0","1"))
s1vAnc = data.frame(matrix(NA, nrow=num_features,ncol=2))
diff_exp_1$table$PValue
s1vAnc = data.frame(matrix(NA, nrow=num_features,ncol=2))
s1vAnc$X2 = p.adjust(diff_exp_1$table$PValue, method = "BH") #Benjaminiâ€“Hochberg procedure
s1vAnc$X1 <- row.names(my.data)
View(s1vAnc)
dge_list = calcNormFactors(dge_list,ref="0")
design = model.matrix(~group)
dge_list = estimateDisp(dge_list,design)
count(rowSums(my.data)==0)
table(rowSums(my.data)==0>=30)
table(rowSums(my.data)==0)>=30
table(rowSums(my.data<=0)==60)
table(rowSums(my.data<=0)==59)
knitr::opts_chunk$set(echo = TRUE)
## try http:// if https:// URLs are not supported
#source("https://bioconductor.org/biocLite.R")
#biocLite("DESeq2")
#library(DESeq)
library(DESeq2)
library(TxDb.Scerevisiae.UCSC.sacCer2.sgdGene)
library(RColorBrewer)
library(gplots)
filenames.GC <- list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/HTseq_update_May2018/GC/exons_stranded",pattern = "*.txt", full.names = FALSE)
filenames.GC <- list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/HTseq_update_May2018/GC/exons_stranded",pattern = "*.txt", full.names = FALSE)
filenames.GC <- as.data.frame(filenames.GC)
View(filenames.GC)
filenames.GC
filenames.GC
group.GC <- as.factor(c("1","11","11","11","18","18","18","1","1","21","21","2","2","2","31","31","31","3","3","3","4","49","49","49","4","4","59","59","59","5","5","5","61","61","61","69","69","69","6","6","6","7","76","76","76","77","77","77","7","7","8","8","8","9","9","9","GCAnc","GCAnc","GCAnc"))
GC.table <- data.frame(sampleName = samplenamesGC,fileName = filenames.GC, condition = group.GC, run = run.GC)
samplenamesGC <- c("1A","11A","11B","11C","18A","18B","18C","1B","1C","21A","21C","2A","2B","2C","31A","31B","31C","3A","3B","3C","4A", "49A","49B","49C","4B","4C","59A","59B","59C","5A","5B","5C","61A","61B","61C","69A","69B","69C","6A","6B","6C","7A", "76A","76B","76C","77A","77B","77C","7B","7C","8A","8B","8C","9A","9B","9C","GCAncA","GCAncB","GCAncC")
group.GC <- as.factor(c("1","11","11","11","18","18","18","1","1","21","21","2","2","2","31","31","31","3","3","3","4","49","49","49","4","4","59","59","59","5","5","5","61","61","61","69","69","69","6","6","6","7","76","76","76","77","77","77","7","7","8","8","8","9","9","9","GCAnc","GCAnc","GCAnc"))
GC.table <- data.frame(sampleName = samplenamesGC,fileName = filenames.GC, condition = group.GC, run = run.GC)
GC.table <- data.frame(sampleName = samplenamesGC,fileName = filenames.GC, condition = group.GC ) #, run = run.GC)
View(GC.table)
cols <- as.data.frame(samplenamesGC)
desGC <- DESeqDataSetFromHTSeqCount(sampleTable = GC.table, directory = "/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/HTseq_update_May2018/GC/exons", design = ~ condition + run)
desGC <- DESeqDataSetFromHTSeqCount(sampleTable = GC.table, directory = "/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/HTseq_update_May2018/GC/exons_stranded", design = ~ condition + run)
desGC <- DESeqDataSetFromHTSeqCount(sampleTable = GC.table, directory = "/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/HTseq_update_May2018/GC/exons_stranded", design = ~ condition)
desGC <- estimateSizeFactors(desGC)
sizeFactors(desGC)
head(counts(desGC))
desGC <- estimateDispersions(desGC)
design(desGC)
modelMatrix(desGC)
desGC.para <- estimateDispersions(desGC,fitType="parametric")
desGC.para <- estimateDispersions(desGC,fitType="parametric")
desGC.loc <- estimateDispersions(desGC,fitType = "local")
knitr::opts_chunk$set(echo = TRUE)
## try http:// if https:// URLs are not supported
#source("https://bioconductor.org/biocLite.R")
#biocLite("DESeq2")
#library(DESeq)
library(DESeq2)
library(TxDb.Scerevisiae.UCSC.sacCer2.sgdGene)
library(RColorBrewer)
library(gplots)
filenames.GC <- list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/HTseq_update_May2018/GC/exons_stranded",pattern = "*.txt", full.names = FALSE)
filenames.GC <- as.data.frame(filenames.GC)
samplenamesGC <- c("1A","11A","11B","11C","18A","18B","18C","1B","1C","21A","21C","2A","2B","2C","31A","31B","31C","3A","3B","3C","4A", "49A","49B","49C","4B","4C","59A","59B","59C","5A","5B","5C","61A","61B","61C","69A","69B","69C","6A","6B","6C","7A", "76A","76B","76C","77A","77B","77C","7B","7C","8A","8B","8C","9A","9B","9C","GCAncA","GCAncB","GCAncC")
group.GC <- as.factor(c("1","11","11","11","18","18","18","1","1","21","21","2","2","2","31","31","31","3","3","3","4","49","49","49","4","4","59","59","59","5","5","5","61","61","61","69","69","69","6","6","6","7","76","76","76","77","77","77","7","7","8","8","8","9","9","9","GCAnc","GCAnc","GCAnc"))
GC.table <- data.frame(sampleName = samplenamesGC,fileName = filenames.GC, condition = group.GC ) #, run = run.GC)
View(GC.table)
cols <- as.data.frame(samplenamesGC)
desGC <- DESeqDataSetFromHTSeqCount(sampleTable = GC.table, directory = "/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/HTseq_update_May2018/GC/exons_stranded", design = ~ condition)
desGC <- estimateSizeFactors(desGC)
sizeFactors(desGC)
head(counts(desGC))
design(desGC)
desGC.para <- estimateDispersions(desGC,fitType="parametric")
desGC.loc <- estimateDispersions(desGC,fitType = "local")
knitr::opts_chunk$set(echo = TRUE)
library(DESeq2)
library(parathyroidSE)
install.packages("parathyroidSE")
library("parathyroidSE")
source("https://bioconductor.org/biocLite.R")
biocLite("parathyroidSE")
library("parathyroidSE")
data("parathyroidGenesSE")
knitr::opts_chunk$set(echo = TRUE)
library(DESeq2)
library("parathyroidSE")
data("parathyroidGenesSE")
se <- parathyroidGenesSE
colnames(se) <- se$run
colData(se)[1:5,1:4]
ddsFull <- DESeqDataSet(se,design=~patient+treatment)
countdata <- assay(parathyroidGenesSE)
head(countdata)
coldata <- colData(parathyroidGenesSE)
rownames(coldata) <- coldata$run
colnames(countdata) <- coldata$run
head(coldata[,c("patient","treatment","time")])
ddsFullCountTable <- DESeqDataSetFromMatrix(countData=countdata,colData=coldata,design=~patient+treatment)
ddsFullCountTable
as.data.frame(colData(ddsFull)[,c("sample","patient","treatment","time")])
ddsCollapsed <- collapseReplicates(ddsFull, groupby = ddsFull$sample,run=ddsFull$run)
head(as.data.frame(colData(ddsCollapsed)[,c("sample","runsCollapsed")]),12)
original <- rowSums(counts(ddsFull)[,ddsFull$sample=="SRS308873"])
all(original==counts(ddsCollapsed[,"SRS308873"]))
dds <- ddsCollapsed(,ddsCollapsed$time=="48h")
dds <- ddsCollapsed[,ddsCollapsed$time=="48h"]
dds$time <- droplevels(dds$time)
dds$treatment <- relevel(dds$treatment,"Control")
as.data.frame(colData(dds))
dds <- DESeq(dds)
res <- results(dds)
res
mcols(res,use.names=TRUE)
res <- results(dds, contrast = c("treatment","DPN","Control"))
res
sum(res$pvalue <0.01,na.rm=TRUE)
table(is.na(res$pvalue))
sum(res$padj <0.1, na.rm = TRUE)
resSig <- res[which(res$padj <0.1),]
head(resSig(order[resSig$log2FoldChange],))
head(resSig[order(resSig$log2FoldChange),])
res <- results(dds)
res
mcols(res,use.names=TRUE)
data("parathyroidGenesSE")
se <- parathyroidGenesSE
colnames(se) <- se$run
colData(se)[1:5,1:4]
ddsFull <- DESeqDataSet(se,design=~patient+treatment)
countdata <- assay(parathyroidGenesSE)
head(countdata)
coldata <- colData(parathyroidGenesSE)
coldata <- colData(parathyroidGenesSE)
coldata <- colData(parathyroidGenesSE)
coldata <- colData(parathyroidGenesSE)
rownames(coldata) <- coldata$run
colnames(countdata) <- coldata$run
head(coldata[,c("patient","treatment","time")])
ddsFullCountTable <- DESeqDataSetFromMatrix(countData=countdata,colData=coldata,design=~patient+treatment)
ddsFullCountTable
as.data.frame(colData(ddsFull)[,c("sample","patient","treatment","time")])
ddsCollapsed <- collapseReplicates(ddsFull, groupby = ddsFull$sample,run=ddsFull$run)
head(as.data.frame(colData(ddsCollapsed)[,c("sample","runsCollapsed")]),12)
original <- rowSums(counts(ddsFull)[,ddsFull$sample=="SRS308873"])
all(original==counts(ddsCollapsed[,"SRS308873"]))
dds <- ddsCollapsed[,ddsCollapsed$time=="48h"]
dds$time <- droplevels(dds$time)
dds$treatment <- relevel(dds$treatment,"Control")
as.data.frame(colData(dds))
dds <- DESeq(dds)
res <- results(dds)
res
mcols(res,use.names=TRUE)
res <- results(dds, contrast = c("treatment","DPN","Control"))
res <- results(dds)
res
mcols(res,use.names=TRUE)
res2 <- results(dds, contrast = c("treatment","DPN","Control"))
res2
sum(res$pvalue <0.01,na.rm=TRUE)
table(is.na(res$pvalue))
sum(res$padj <0.1, na.rm = TRUE)
resSig <- res[which(res$padj <0.1),]
head(resSig[order(resSig$log2FoldChange),])
tail(resSig[order(resSig$log2FoldChange),])
plotMA(res,ylim=c(-1,1))
sum(res2$pvalue <0.01,na.rm=TRUE)
table(is.na(res2$pvalue))
sum(res2$padj <0.1, na.rm = TRUE)
res2Sig <- res2[which(res2$padj <0.1),]
head(res2Sig[order(res2Sig$log2FoldChange),])
tail(res2Sig[order(res2Sig$log2FoldChange),])
plotMA(res2,ylim=c(-1,1))
results(dds)
resultsNames(dds)
lfcShrink(dds,coef="Control",res)
lfcShrink(dds,contrast=c("treatment","DPN","Control"),res)
lfcShrink(dds,res)
res2 <- results(dds, betaPrior=FALSE, contrast = c("treatment","DPN","Control"))
res2
resultsNames(dds)
lfcShrink(dds,res)
lfcShrink(dds,res2)
lfcShrink(dds=dds,coef=1,res=res2)
resultsNames(dds)
lfcShrink(dds=dds,coef=5,res=res2)
sum(res2$pvalue <0.01,na.rm=TRUE)
resNorm <- lfcShrink(dds, coef=5, type="normal")
sum(resNorm$pvalue <0.01,na.rm=TRUE)
resNorm <- lfcShrink(dds, coef=5, type="normal")
resNorm
?lfcShrink
resNorm <- lfcShrink(dds, coef=5, type="normal",res2)
resNorm <- lfcShrink(dds, type="normal",res2)
res2 <- results(dds, contrast = c("treatment","DPN","Control"))
res2
resultsNames(dds)
lfcShrink(dds=dds,coef=5,res=res2)
resNorm <- lfcShrink(dds, type="normal",res2)
resNorm <- lfcShrink(dds=dds, coef=5,res=res2)
resNorm
plotMA(resNorm,ylim=c(-1,1))
sum(resNorm$pvalue <0.01,na.rm=TRUE)
table(is.na(resNorm$pvalue))
sum(resNorm$padj <0.1, na.rm = TRUE)
resNormSig <- resNorm[which(resNorm$padj <0.1),]
head(resNormSig[order(resNormSig$log2FoldChange),])
tail(resNormSig[order(resNormSig$log2FoldChange),])
plotDispEsts(dds,ylim=c(1e-6,1-1))
plotDispEsts(dds,ylim=c(1e-6,1e1))
hist(resNorm$pvalue,breaks=20,col="grey")
qs <- c(0,quantile(res$baseMean[res$baseMean>0],0:7/7))
bins <- cut(res$baseMean,qs)
levels(bins) <- paste0("~",round(.5*qs[-1]+.5*qs[-length(qs)]))
qs <- c(0,quantile(resNorm$baseMean[resNorm$baseMean>0],0:7/7))
bins <- cut(resNorm$baseMean,qs)
levels(bins) <- paste0("~",round(.5*qs[-1]+.5*qs[-length(qs)]))
ratios <- tapply(resNorm$pvalue,bins,function(p)mean(p<.01, na.rm=TRUE))
barplot(ratios,xlab="mean normalized count",ylab="ratio of small p values")
attr(resNorm,"filterThreshold")
res2 <- results(dds, independentFiltering = TRUE, contrast = c("treatment","DPN","Control"))
resNorm <- lfcShrink(dds=dds, coef=5,res=res2)
attr(resNorm,"filterThreshold")
attr(res2, "filterThreshold")
res2 <- results(dds, independentFiltering = TRUE, alpha=0.1, contrast = c("treatment","DPN","Control"))
attr(res2, "filterThreshold")
metadata(res2)$filterThreshold
metadata(resNorm)$filterThreshold
metadata(res2)$alpha
plot(attr(resNorm,"filterNumRej"),type="b",xlab="quantiles of baseMean",ylab="number of rejections")
plot(attr(resNorm,"filterNumRej"),type="b",xlab="quantiles of baseMean",ylab="number of rejections",xlim=c(0,1))
plot(attr(resNorm,"filterNumRej"),type="b",xlab="quantiles of baseMean",ylab="number of rejections",xlim=c(0,1),ylim=c(0,200))
attr(resNorm,"filterNumRej")
plot(metadata(resNorm)$filterNumRej,type="b",xlab="quantiles of baseMean",ylab="number of rejections",xlim=c(0,1),ylim=c(0,200))
plot(metadata(resNorm)$filterNumRej,type="b",xlab="quantiles of baseMean",ylab="number of rejections",xlim=c(0,1),ylim=c(0,1000))
plot(metadata(resNorm)$filterNumRej,type="b",xlab="quantiles of baseMean",ylab="number of rejections",xlim=c(0,1),ylim=c(0,500))
plot(metadata(resNorm)$filterNumRej,type="b",xlab="quantiles of baseMean",ylab="number of rejections",xlim=c(0,1),ylim=c(0,300))
plotMA(resNorm,ylim=c(-1,1))
plotDispEsts(dds,ylim=c(1e-6,1e1))
hist(resNorm$pvalue,breaks=20,col="grey")
hist(res2$pvalue,breaks=20,col="purple")
se <- parathyroidGenesSE
colnames(se) <- se$run
colData(se)[1:5,1:4]
ddsFull <- DESeqDataSet(se,design=~patient+treatment)
countdata <- assay(parathyroidGenesSE)
head(countdata)
coldata <- colData(parathyroidGenesSE)
rownames(coldata) <- coldata$run
colnames(countdata) <- coldata$run
head(coldata[,c("patient","treatment","time")])
ddsFullCountTable <- DESeqDataSetFromMatrix(countData=countdata,colData=coldata,design=~patient+treatment)
ddsFullCountTable
as.data.frame(colData(ddsFull)[,c("sample","patient","treatment","time")])
ddsCollapsed <- collapseReplicates(ddsFull,
groupby = ddsFull$sample,
run = ddsFull$run )
head(as.data.frame(colData(ddsCollapsed)[,c("sample","runsCollapsed")]),12)
original <- rowSums( counts(ddsFull) [ , ddsFull$sample == "SRS308873"] )
all( original == counts (ddsCollapsed[ , "SRS308873"] ) )
dds <- ddsCollapsed[ , ddsCollapsed$time == "48h" ]
dds$time <- droplevels(dds$time)
dds$treatment <- relevel( dds$treatment , "Control" )
as.data.frame(colData(dds))
dds <- DESeq(dds)
res <- results(dds)
res
dds <- ddsCollapsed[ , ddsCollapsed$time == "48h" ]
dds$time <- droplevels(dds$time)
dds$treatment <- relevel( dds$treatment , "Control" )
as.data.frame(colData(dds))
dds
ddsCollapsed[ , ddsCollapsed$time == "48h" ]
as.data.frame(colData(ddsFull)[,c("sample","patient","treatment","time")])
ddsCollapsed$time
ddsCollapsed$time == "48h"
ddsCollapsed[ , ddsCollapsed$time == "48h" ]
ddsCollapsed$time == "48h"
dds <- ddsCollapsed[ , ddsCollapsed$time == "48h" ]
dds
dds$time <- droplevels(dds$time)
dds
subset(ddsCollapsed, ddsCollapsed$time == "48h" )
dds <- subset(ddsCollapsed, ddsCollapsed$time == "48h" )
dds$time <- droplevels(dds$time)
dds
dds$treatment <- relevel( dds$treatment , "Control" )
as.data.frame(colData(dds))
dds
dds <- DESeq(dds)
res <- results(dds)
res
mcols(res,use.names=TRUE)
res2 <- results(dds, contrast = c("treatment","DPN","Control"))
res2
resultsNames(dds)
lfcShrink(dds=dds,coef=5,res=res2)
resNorm <- lfcShrink(dds=dds, coef=5,res=res2)
resNorm
plotMA(resNorm,ylim=c(-1,1))
sum(resNorm$pvalue <0.01,na.rm=TRUE)
table(is.na(resNorm$pvalue))
sum(resNorm$padj <0.1, na.rm = TRUE)
resNormSig <- resNorm[which(resNorm$padj < 0.1) , ]
head(resNormSig[order(resNormSig$log2FoldChange) , ] )
resApe <- lfcShrink(dds=dds, coef=5, res=res2, type="apeglm")
resApe <- lfcShrink(dds=dds, coef=5, type="apeglm")
library(DESeq2)
sessionInfo()
