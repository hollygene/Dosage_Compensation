file.names
for(i in 1:length(file.names)){
files <- read.table(file.names[i], sep= "\t", header=TRUE)
print(file.names[i])
pdf(paste(file.names[i],".CovGraph.pdf", sep=""))
plot(files$Coverage, col=as.factor(files$Chromosome), ylab="Coverage",ylim=c(0,30000),xlim=c(0,1300), xlab="Bins (10kb)",main=tools::file_path_sans_ext(basename(file.names))[i])
dev.off()
}
file.names <- list.files(path = "/Users/ariellatsfoni/Dropbox/Ariella_Tsfoni/new_to_graph", pattern="*.txt",full.names = TRUE)
knitr::opts_chunk$set(echo = TRUE)
file.names <- list.files(path = "/Users/ariellatsfoni/Dropbox/Ariella_Tsfoni/new_to_graph", pattern="*.txt",full.names = TRUE)
file.names <- list.files(path = "/Users/hollymcqueary/Dropbox/mentoring/Ariella_Tsfoni/new_to_graph", pattern="*.txt",full.names = TRUE)
file.names
for(i in 1:length(file.names)){
files <- read.table(file.names[i], sep= "\t", header=TRUE)
print(file.names[i])
pdf(paste(file.names[i],".CovGraph.pdf", sep=""))
plot(files$Coverage, col=as.factor(files$Chromosome), ylab="Coverage",ylim=c(0,30000),xlim=c(0,1300), xlab="Bins (10kb)",main=tools::file_path_sans_ext(basename(file.names))[i])
dev.off()
}
file.names
i=2
files <- read.table(file.names[i], sep= "\t", header=TRUE)
print(file.names[i])
pdf(paste(file.names[i],".CovGraph.pdf", sep=""))
pdf(paste(file.names[i],".CovGraph.pdf", sep=""))
plot(files$Coverage, col=as.factor(files$Chromosome), ylab="Coverage",ylim=c(0,30000),xlim=c(0,1300), xlab="Bins (10kb)",main=tools::file_path_sans_ext(basename(file.names))[i])
files$Coverage
View(files)
file.names <- list.files(path = "/Users/hollymcqueary/Dropbox/mentoring/Ariella_Tsfoni/new_to_graph", pattern="*.txt",full.names = TRUE)
file.names
i=2
files <- read.table(file.names[i], sep= "\t", header=TRUE)
print(file.names[i])
file.names
files <- read.table(file.names[i], sep= "\t", header=TRUE)
print(file.names[i])
file.names <- list.files(path = "/Users/hollymcqueary/Dropbox/mentoring/Ariella_Tsfoni/new_to_graph", pattern="*.txt",full.names = TRUE)
file.names
i=3
file.names[i]
files <- read.table(file.names[i], sep= "\t", header=TRUE)
print(file.names[i])
pdf(paste(file.names[i],".CovGraph.pdf", sep=""))
plot(files$Coverage, col=as.factor(files$Chromosome), ylab="Coverage",ylim=c(0,30000),xlim=c(0,1300), xlab="Bins (10kb)",main=tools::file_path_sans_ext(basename(file.names))[i])
pdf(paste(file.names[i],".CovGraph.pdf", sep=""))
plot(files$Coverage, col=as.factor(files$Chromosome), ylab="Coverage",ylim=c(0,30000),xlim=c(0,1300), xlab="Bins (10kb)",main=tools::file_path_sans_ext(basename(file.names))[i])
knitr::opts_chunk$set(echo = TRUE)
#load in edgeR and limma
library(limma)
library(Glimma)
library(edgeR)
library(dplyr)
library(TxDb.Scerevisiae.UCSC.sacCer2.sgdGene)
library(RColorBrewer)
library(gplots)
library(magicfor)
library(tidyr)
library(data.table)
library(stringr)
library(ggplot2)
library(plotly)
library(GenomicFeatures)
#########################################
#load files into R as vector
files.GC <- list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/Old/GC",pattern = "*.txt", full.names = TRUE)
files.GC
#files.MA <- list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/4_3_18/MA",pattern = "*.txt", full.names = TRUE)
#files.MA
#load in data from files using readDGE from edgeR
#getting out just the EntrezID and read count, neglecting genelength
x.GC <- readDGE(files.GC,columns=c(1,2))
#x.MA <- readDGE(files.MA,columns=c(1,2))
#check the parameters
class(x.GC)
#class(x.MA)
#and dimensions
dim(x.GC)
#dim(x.MA)
#organize sample information
#change sample names so they are simpler
files.GC
samplenames.GC <- tools::file_path_sans_ext(list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/Old/GC",pattern = "*.txt", full.names = FALSE))
samplenames.GC
#samplenames.GC <- c("G11B","G11C","G18B","G18C","G1B","G1C","G11A","G21C","G2A","G2B","G2C","G31B","G31C","G3A","G3B","G3C","G49B","G49C","G4B","G4C","G59B","G59C","G5A","G5B","G5C","G61B","G61C","G66C","G69B","G69C","G6A","G6B","G6C","G76B","G76C","G77B","G77C","G7B","G7C","G8B","G8C","G9A","G9B","G9C","GAB","GAC","G66B","G18A","G21A","G31A","G4A","G49A","G61A","G7A","G8A")
#length(samplenames.GC)
#put filenames into DGEList as column names
samplenamesGC <- c(".11.A",".11.B",".11.C",".18.A",".18.B",".18.C",".1.A", ".1.B", ".1.C", ".21.B",".21.C",".2.A", ".2.B", ".2.C", ".31.A",".31.B",".31.C",".3.A", ".3.B", ".3.C",".49.A",".49.B",".49.C",".4.A", ".4.B",".4.C", ".59.A",".59.B",".59.C",".5.A",".5.B", ".5.C", ".61.A",".61.B",".61.C",".66.B",".66.C",".68.A",".68.B",".68.C",".6.A", ".6.B", ".6.C", ".76.A",".76.B",".76.C",".77.A",".77.B",".77.C",".7.A",".7.B", ".7.C", ".8.A", ".8.B", ".8.C",".9.A", ".9.B", ".9.C", ".GCAnc.A" ,".GCAnc.B",".GCAnc.C")
colnames(x.GC) <- samplenamesGC
x.GC$samples
x.GC$counts
###################################################
#group samples together according to experiment
x.GC
#View(x.GC$samples)
#files.MA
#samplenames.MA <- c("M112B","M112C","M115B","M115C","M117B","M117C","M123B","M123C","M141B","M141C","M152B","M152C","M29B","M29C","M50B","MAC","M1A","M1B","M1C","M2A","M2B","M2C","M3A","M3B","M3C","M4A","M4B","M4C","M5A","M5B","M5C","M6A","M6C","M6B","M7A","M7B","M7C","M8A","M8B","M8C","M9A","M9B","M9C","M11A","M11B","M11C","15A","15B","15C","28A","28B","28C","88A","88B","88C","108A","108B","108C","119A","119B","119C","OMAA","OMAB","OMAC")
#length(samplenames.MA)
#colnames(x.MA) <- samplenames.MA
group.GC <- as.factor(c(".11.",".11.",".11.",".18.",".18.",".18.",".1.", ".1.", ".1.", ".21.",".21.",".2.", ".2.", ".2.", ".31.",".31.",".31.",".3.", ".3.", ".3.",".49.",".49.",".49.",".4.", ".4.",".4.", ".59.",".59.",".59.",".5.",".5.", ".5.", ".61.",".61.",".61.",".66.",".66.",".68.",".68.",".68.",".6.", ".6.", ".6.", ".76.",".76.",".76.",".77.",".77.",".77.",".7.",".7.", ".7.", ".8.", ".8.", ".8.",".9.", ".9.", ".9.", ".GCAnc." ,".GCAnc.",".GCAnc."))
write.csv(x.GC$counts,file="raw_counts.csv")
length(group.GC)
levels(group.GC)
nlevels(group.GC)
x.GC$samples$group <- group.GC
#group.MA <- as.factor(c("M112","M112","M115","M115","M117","M117","M123","M123","M141","M141","M152","M152","M29","M29","M50","MA","M1","M1","M1","M2","M2","M2","M3","M3","M3","M4","M4","M4","M5","M5","M5","M6","M6","M6","M7","M7","M7","M8","M8","M8","M9","M9","M9","M11","M11","M11","M15","M15","M15","M28","M28","M28","M88","M88","M88","M108","M108","M108","M119","M119","M119","MAA","MAA","MAA"))
#length(group.MA)
#levels(group.MA)
#nlevels(group.MA)
#x.MA$samples$group <- group.MA
#come back to this later
#run <- as.factor(rep(c(1,2), c(16,48)))
#x.MA$samples$run <- run
#ploidy <- as.factor(rep(c("tri","eu","tri","dbl","eu","tri","dbl","tri","eu","tri","mon","eu","eu","eu","tri","eu","eu","tri","eu","tri","seg","eu","eu","tri","tri","eu","eu","eu","eu","eu"),c(2,3,3,2,3,3,3,3,3,2,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3)))
#x$samples$ploidy <- ploidy
#x.MA$samples
#organize the gene annotations
#biocLite("TxDb.Scerevisiae.UCSC.sacCer2.sgdGene")
#library(TxDb.Scerevisiae.UCSC.sacCer2.sgdGene)
txdb <- TxDb.Scerevisiae.UCSC.sacCer2.sgdGene
columns(txdb)
#want TXCHROM
#want GENEID
geneidGC <- rownames(x.GC)
#geneidMA <- rownames(x.MA)
#ran into a problem here: select didnt want to work. turns out it was trying to use diplyr select not ensembldb select.
colms <- c("TXSTART","TXEND")
genesGC <- ensembldb::select(txdb, keys=geneidGC, columnns="GENEID","TXCHROM" , keytype="GENEID")
#genelengthsGC <-
genesGC
genesGC <- genesGC[!duplicated(genesGC$GENEID),]
#genesGC.remove <- na.omit(genesGC.remove)
#genesGC.remo <- genesGC.remo[-grep("^chrM$",genesGC.remo)]
#remove <- "chrI"
remove1 <- "chrM"
#genesGC.test <- genesGC[-(grep(paste0(remove,"$"),genesGC$TXCHROM,perl=TRUE)),]
genesGC.test <- genesGC[-(grep(paste0(remove1,"$"),genesGC$TXCHROM,perl=TRUE)),]
genesGC.test <- na.omit(genesGC.test)
genesGC.test
genesGC <- genesGC.test
lengths <- transcriptLengths(txdb)
genesGC <- merge(genesGC,lengths,by.x="GENEID",by.y="gene_id")
#lengthsGC <- ensembldb::select(lengths, keys=geneidGC, columnns="gene_id","tx_len" , keytype="gene_id")
#genesGC <- genesGC[!isActiveSeq(txdb)["2micron"],]
#genesGC <- genesGC[!isActiveSeq(txdb)["chrM"],]
#genesMA <- select(txdb, keys=geneidMA, columns="TXCHROM","GENEID",keytype="GENEID")
#genesMA
#genesMA <- genesMA[!duplicated(genesMA$GENEID),]
#data frame of gene annotations is added back to the DGEList
x.GC$genes <- genesGC
x.GC$genes$tx_len
#x.GC.test <- x.GC
#x.GC.test$genes <- genesGC.test
#x.GC.test$genes
#x.GC.test$genes <- droplevels(x.GC.test$genes)
#remove rows with NA
#x.MA$genes <- genesMA
#x.MA
#myData <- x[-c("__no_feature", "__ambiguous", "__alignment_not_unique"), ]
#newdata <- x(!(x$counts %in% c("__no_feature", "__ambiguous", "__alignment_not_unique"))
#updated_myData <- subset(x, id %in% c("__no_feature", "__ambiguous", "__alignment_not_unique"))
#########################################################
#data pre-processing
#get counts per million
#rpkms
rpkmGC <- rpkm(x.GC,x.GC$genes$tx_len)
#cpmGC <- cpm(x.GC)
#cpmGC.test <- cpm(x.GC.test)
#cpmGC$chrm <- x.GC$genes$TXCHROM
#cpmMA <- cpm(x.MA)
#get log counts per million
#lcpmGC <- cpm(x.GC,log=TRUE)
#lcpmGC.test <- cpm(x.GC.test, log=TRUE)
#lcpmGC$chrm <- x.GC$genes$TXCHROM
#lcpmMA <- cpm(x.MA,log=TRUE)
#lcpmMA
############################################################################
#do the same thing but be more stringent
###USE THIS ONE!!
#remove genes that are lowly expressed in all samples (ie not expressed in any)
#dim(x.GC)
table(rowSums(x.GC$counts<=0)==60)
table(rowSums(x.GC$counts>=1)==60)
keepGC <- rowSums(rpkmGC>0)>=2
x.GC.str <- x.GC[keepGC,keep.lib.sizes=FALSE]
View(x.GC.str$counts)
x.GC <- x.GC.str
View(x.GC$counts)
#only keep genes that are expressed in at least one group (group size=3 in this case)
#table(rowSums(cpmGC>0.0001)>=2)
#table(rowSums(cpmGC>99999)>=1)
#keep.exprsGC <- rowSums(cpmGC>1)>=2
#keep.exprsGC.test <- rowSums(cpmGC>1.1)>=3
#str(keep.exprsGC)
#str(x.GC)
#x.GC.str <- x.GC[keep.exprsGC,keep.lib.sizes=FALSE]
#x.GC.test <- x.GC[keep.exprsGC.test,keep.lib.sizes=FALSE]
#dim(x.GC.str)
#table(rowSums(x.GC.str$counts>0.0001))
#make x.GC the filtered one
#x.GC <- x.GC.str
#dim(x.GC.test)
#table(rowSums(x.GC.test$counts<=0)==60)
#table(rowSums(x.GC.test$counts>=1)==60)
#table(rowSums(cpmGC.test>0.00001)>=60)
#only keep genes that are expressed in at least one group (group size=3 in this case)
#table(rowSums(cpmGC.test>0.0001)>=2)
#keep.exprsGC.test <- rowSums(cpmGC.test>1)>=2
#keep.exprsGC.test <- rowSums(cpmGC>1.1)>=3
#str(keep.exprsGC.test)
#str(x.GC.test)
#x.GC.str.test <- x.GC.test[keep.exprsGC.test,keep.lib.sizes=FALSE]
#x.GC.test <- x.GC[keep.exprsGC.test,keep.lib.sizes=FALSE]
#dim(x.GC.str.test)
#table(rowSums(x.GC.str$counts>0.0001))
#make x.GC the filtered one
#x.GC.test <- x.GC.str.test
#remove genes that are lowly expressed in all samples (ie not expressed in any)
#dim(x.MA)
#table(rowSums(x.MA$counts==0)==64)
#only keep genes that are expressed in at least one group (group size=3 in this case)
#table(rowSums(cpmMA>1)>=3)
#keep.exprsMA <- rowSums(cpmMA>1)>=3
#x.MA <- x.MA[keep.exprsMA,,keep.lib.sizes=FALSE]
#dontkeep.exprMA <- rowSums(x.MA$counts==0)==64
#x.MA <- x.MA[!dontkeep.exprMA,,keep.lib.sizes=FALSE]
#dim(x.MA)
###################################################
#make graphs to compare raw versus filtered data
nsamplesGC <- ncol(x.GC)
colGC <- colorRampPalette(brewer.pal(21,"Set1"))(ncol(x.GC))
nlevels(colGC)
{
pdf("Raw_dataGC_RPKM.pdf")
plot(density(rpkmGC[,1]),col=colGC[1],lwd=2,las=2,main="",xlab="")
title(main="A. Raw Data", xlab="rpkm")
abline(v=0,lty=3)
for(i in 2:nsamplesGC) {
den <- density(rpkmGC[,i])
lines(den$x,den$y,col=colGC[i],lwd=2)
}
legend("topright",samplenames.GC, text.col=colGC, bty="n",cex=0.4,ncol=4)
}
{
pdf("Filtered_dataGC_rpkm.pdf")
rpkmGCfil<- rpkm(x.GC, x.GC$genes$tx_len)
plot(density(rpkmGCfil[,1]),col=colGC[1],lwd=2,las=2,main="",xlab="")
title(main="B. Filtered Data", xlab="rpkm")
abline(v=0, lty=3)
for (i in 2:nsamplesGC) {
den <- density(rpkmGCfil[,i])
lines(den$x,den$y,col=colGC[i],lwd=2)
}
legend("topright",samplenames.GC, text.col=colGC,bty="n",cex=0.4,ncol=4)
}
x.GC <- calcNormFactors(x.GC,method="TMM")
x.GC <- calcNormFactors(x.GC,method="TMM")
x.GC$counts
x.GC$samples$lib.size
x.GC$samples
View(x.GC$samples)
knitr::opts_chunk$set(echo = TRUE)
#load in edgeR and limma
library(limma)
library(Glimma)
library(edgeR)
library(dplyr)
library(TxDb.Scerevisiae.UCSC.sacCer2.sgdGene)
library(RColorBrewer)
library(gplots)
library(magicfor)
library(tidyr)
library(data.table)
library(stringr)
library(ggplot2)
library(plotly)
library(GenomicFeatures)
files.GC <- list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/Old/GC",pattern = "*.txt", full.names = TRUE)
files.GC
x.GC <- readDGE(files.GC,columns=c(1,2))
class(x.GC)
dim(x.GC)
files.GC
samplenames.GC <- tools::file_path_sans_ext(list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/Old/GC",pattern = "*.txt", full.names = FALSE))
samplenames.GC
samplenamesGC <- c(".11.A",".11.B",".11.C",".18.A",".18.B",".18.C",".1.A", ".1.B", ".1.C", ".21.B",".21.C",".2.A", ".2.B", ".2.C", ".31.A",".31.B",".31.C",".3.A", ".3.B", ".3.C",".49.A",".49.B",".49.C",".4.A", ".4.B",".4.C", ".59.A",".59.B",".59.C",".5.A",".5.B", ".5.C", ".61.A",".61.B",".61.C",".66.B",".66.C",".68.A",".68.B",".68.C",".6.A", ".6.B", ".6.C", ".76.A",".76.B",".76.C",".77.A",".77.B",".77.C",".7.A",".7.B", ".7.C", ".8.A", ".8.B", ".8.C",".9.A", ".9.B", ".9.C", ".GCAnc.A" ,".GCAnc.B",".GCAnc.C")
colnames(x.GC) <- samplenamesGC
x.GC$samples
x.GC$counts
View(x.GC$counts)
View(x.GC$samples)
cols(x.GC$counts)
x.GC
group.GC <- as.factor(c(".11.",".11.",".11.",".18.",".18.",".18.",".1.", ".1.", ".1.", ".21.",".21.",".2.", ".2.", ".2.", ".31.",".31.",".31.",".3.", ".3.", ".3.",".49.",".49.",".49.",".4.", ".4.",".4.", ".59.",".59.",".59.",".5.",".5.", ".5.", ".61.",".61.",".61.",".66.",".66.",".68.",".68.",".68.",".6.", ".6.", ".6.", ".76.",".76.",".76.",".77.",".77.",".77.",".7.",".7.", ".7.", ".8.", ".8.", ".8.",".9.", ".9.", ".9.", ".GCAnc." ,".GCAnc.",".GCAnc."))
length(group.GC)
levels(group.GC)
nlevels(group.GC)
x.GC$samples$group <- group.GC
txdb <- TxDb.Scerevisiae.UCSC.sacCer2.sgdGene
columns(txdb)
geneidGC <- rownames(x.GC)
colms <- c("TXSTART","TXEND")
genesGC <- ensembldb::select(txdb, keys=geneidGC, columnns="GENEID","TXCHROM" , keytype="GENEID")
genesGC
genesGC <- genesGC[!duplicated(genesGC$GENEID),]
remove1 <- "chrM"
genesGC.test <- genesGC[-(grep(paste0(remove1,"$"),genesGC$TXCHROM,perl=TRUE)),]
genesGC.test <- na.omit(genesGC.test)
genesGC.test
genesGC <- genesGC.test
lengths <- transcriptLengths(txdb)
lengths <- transcriptLengths(txdb)
genesGC <- merge(genesGC,lengths,by.x="GENEID",by.y="gene_id")
x.GC$genes <- genesGC
x.GC$genes$tx_len
rpkmGC <- rpkm(x.GC,x.GC$genes$tx_len)
table(rowSums(x.GC$counts<=0)==60)
table(rowSums(x.GC$counts>=1)==60)
keepGC <- rowSums(rpkmGC>0)>=2
x.GC.str <- x.GC[keepGC,keep.lib.sizes=FALSE]
View(x.GC.str$counts)
x.GC <- x.GC.str
View(x.GC$counts)
x.GC <- calcNormFactors(x.GC,method="TMM",refColumn = 20 )
View(x.GC$counts)
View(x.GC$samples)
files.GC <- list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/Old/GC",pattern = "*.txt", full.names = TRUE)
files.GC
x.GC <- readDGE(files.GC,columns=c(1,2))
class(x.GC)
dim(x.GC)
files.GC
samplenames.GC <- tools::file_path_sans_ext(list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/Old/GC",pattern = "*.txt", full.names = FALSE))
samplenames.GC
samplenamesGC <- c(".11.A",".11.B",".11.C",".18.A",".18.B",".18.C",".1.A", ".1.B", ".1.C", ".21.B",".21.C",".2.A", ".2.B", ".2.C", ".31.A",".31.B",".31.C",".3.A", ".3.B", ".3.C",".49.A",".49.B",".49.C",".4.A", ".4.B",".4.C", ".59.A",".59.B",".59.C",".5.A",".5.B", ".5.C", ".61.A",".61.B",".61.C",".66.B",".66.C",".68.A",".68.B",".68.C",".6.A", ".6.B", ".6.C", ".76.A",".76.B",".76.C",".77.A",".77.B",".77.C",".7.A",".7.B", ".7.C", ".8.A", ".8.B", ".8.C",".9.A", ".9.B", ".9.C", ".GCAnc.A" ,".GCAnc.B",".GCAnc.C")
colnames(x.GC) <- samplenamesGC
View(x.GC$samples)
View(x.GC$counts)
x.GC
group.GC <- as.factor(c(".11.",".11.",".11.",".18.",".18.",".18.",".1.", ".1.", ".1.", ".21.",".21.",".2.", ".2.", ".2.", ".31.",".31.",".31.",".3.", ".3.", ".3.",".49.",".49.",".49.",".4.", ".4.",".4.", ".59.",".59.",".59.",".5.",".5.", ".5.", ".61.",".61.",".61.",".66.",".66.",".68.",".68.",".68.",".6.", ".6.", ".6.", ".76.",".76.",".76.",".77.",".77.",".77.",".7.",".7.", ".7.", ".8.", ".8.", ".8.",".9.", ".9.", ".9.", ".GCAnc." ,".GCAnc.",".GCAnc."))
write.csv(x.GC$counts,file="raw_counts.csv")
length(group.GC)
levels(group.GC)
nlevels(group.GC)
x.GC$samples$group <- group.GC
txdb <- TxDb.Scerevisiae.UCSC.sacCer2.sgdGene
columns(txdb)
geneidGC <- rownames(x.GC)
colms <- c("TXSTART","TXEND")
genesGC <- ensembldb::select(txdb, keys=geneidGC, columnns="GENEID","TXCHROM" , keytype="GENEID")
genesGC <- genesGC[!duplicated(genesGC$GENEID),]
remove1 <- "chrM"
genesGC.test <- genesGC[-(grep(paste0(remove1,"$"),genesGC$TXCHROM,perl=TRUE)),]
genesGC.test <- na.omit(genesGC.test)
genesGC.test
genesGC <- genesGC.test
lengths <- transcriptLengths(txdb)
genesGC <- merge(genesGC,lengths,by.x="GENEID",by.y="gene_id")
x.GC$genes <- genesGC
x.GC$genes$tx_len
rpkmGC <- rpkm(x.GC,x.GC$genes$tx_len)
table(rowSums(x.GC$counts<=0)==60)
table(rowSums(x.GC$counts>=1)==60)
keepGC <- rowSums(rpkmGC>0)>=2
x.GC.str <- x.GC[keepGC,keep.lib.sizes=FALSE]
View(x.GC.str$counts)
x.GC <- x.GC.str
View(x.GC$counts)
x.GC.test <- calcNormFactors(x.GC,method="RLE")
View(x.GC.test$samples)
x.GC.UQ <- calcNormFactors(x.GC,method="upperquartile")
x.GC.TMM <- calcNormFactors(x.GC,method="TMM",refColumn = 20 )
x.GC.RLE <- calcNormFactors(x.GC,method="RLE")
x.GC.UQ <- calcNormFactors(x.GC,method="upperquartile")
designGC <- model.matrix(~group.GC)
designGC
x.GC.TMM <- estimateDisp(x.GC.TMM,verbose=FALSE,design=designGC)
x.GC.TMM <- estimateDisp(x.GC.TMM,verbose=FALSE,design=designGC)
x.GC.RLE
x.GC.UQ
#### test
#x.GC.test <- estimateDisp(x.GC.test
x.GC.RLE <- estimateDisp(x.GC.RLE,verbose=FALSE,design=designGC)
x.GC.UQ <- estimateDisp(x.GC.UQ,verbose=FALSE,design=designGC)
x.GC.UQ <- estimateDisp(x.GC.UQ,verbose=FALSE,design=designGC)
exactTest(x.GC,pair=c(".GCAnc.",".11."),dispersion="auto")
etTMM <- exactTest(x.GC.TMM,pair=c(".GCAnc.",".11."))
topTMM <- topTags(etTMM,adjust.method = "BH")
View(topTMM)
etRLE <- exactTest(x.GC.RLE,pair=c(".GCAnc.",".11."))
topRLE <- topTags(etRLE,adjust.method = "BH")
View(topRLE)
etUQ <- exactTest(x.GC.UQ,pair=c(".GCAnc.",".11."))
etUQ <- exactTest(x.GC.UQ,pair=c(".GCAnc.",".11."))
topUQ <- topTags(etUQ,adjust.method = "BH")
View(topUQ)
files.GC <- list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/Old/GC",pattern = "*.txt", full.names = TRUE)
files.GC
x.GC <- readDGE(files.GC,columns=c(1,2))
samplenames.GC <- tools::file_path_sans_ext(list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/Old/GC",pattern = "*.txt", full.names = FALSE))
samplenames.GC
samplenamesGC <- c(".11.A",".11.B",".11.C",".18.A",".18.B",".18.C",".1.A", ".1.B", ".1.C", ".21.B",".21.C",".2.A", ".2.B", ".2.C", ".31.A",".31.B",".31.C",".3.A", ".3.B", ".3.C",".49.A",".49.B",".49.C",".4.A", ".4.B",".4.C", ".59.A",".59.B",".59.C",".5.A",".5.B", ".5.C", ".61.A",".61.B",".61.C",".66.B",".66.C",".68.A",".68.B",".68.C",".6.A", ".6.B", ".6.C", ".76.A",".76.B",".76.C",".77.A",".77.B",".77.C",".7.A",".7.B", ".7.C", ".8.A", ".8.B", ".8.C",".9.A", ".9.B", ".9.C", ".GCAnc.A" ,".GCAnc.B",".GCAnc.C")
colnames(x.GC) <- samplenamesGC
View(x.GC$samples)
group.GC <- as.factor(c(".11.",".11.",".11.",".18.",".18.",".18.",".1.", ".1.", ".1.", ".21.",".21.",".2.", ".2.", ".2.", ".31.",".31.",".31.",".3.", ".3.", ".3.",".49.",".49.",".49.",".4.", ".4.",".4.", ".59.",".59.",".59.",".5.",".5.", ".5.", ".61.",".61.",".61.",".66.",".66.",".68.",".68.",".68.",".6.", ".6.", ".6.", ".76.",".76.",".76.",".77.",".77.",".77.",".7.",".7.", ".7.", ".8.", ".8.", ".8.",".9.", ".9.", ".9.", ".GCAnc." ,".GCAnc.",".GCAnc."))
x.GC$samples$group <- group.GC
x.GC$samples
rpkmGC <- rpkm(x.GC,x.GC$genes$tx_len)
txdb <- TxDb.Scerevisiae.UCSC.sacCer2.sgdGene
columns(txdb)
geneidGC <- rownames(x.GC)
colms <- c("TXSTART","TXEND")
genesGC <- ensembldb::select(txdb, keys=geneidGC, columnns="GENEID","TXCHROM" , keytype="GENEID")
genesGC
genesGC <- genesGC[!duplicated(genesGC$GENEID),]
remove1 <- "chrM"
genesGC.test <- genesGC[-(grep(paste0(remove1,"$"),genesGC$TXCHROM,perl=TRUE)),]
genesGC.test <- na.omit(genesGC.test)
genesGC.test
genesGC <- genesGC.test
lengths <- transcriptLengths(txdb)
genesGC <- merge(genesGC,lengths,by.x="GENEID",by.y="gene_id")
x.GC$genes <- genesGC
x.GC$genes$tx_len
cpmGC <- cpm(x.GC)
knitr::opts_chunk$set(echo = TRUE)
#load in edgeR and limma
library(limma)
library(Glimma)
library(edgeR)
library(dplyr)
library(TxDb.Scerevisiae.UCSC.sacCer2.sgdGene)
library(RColorBrewer)
library(gplots)
library(magicfor)
library(tidyr)
library(data.table)
library(stringr)
library(ggplot2)
library(plotly)
library(GenomicFeatures)
files.GC <- list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/Old/GC",pattern = "*.txt", full.names = TRUE)
files.GC
x.GC <- readDGE(files.GC,columns=c(1,2))
class(x.GC)
dim(x.GC)
files.GC
samplenames.GC <- tools::file_path_sans_ext(list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/Old/GC",pattern = "*.txt", full.names = FALSE))
samplenames.GC
samplenamesGC <- c(".11.A",".11.B",".11.C",".18.A",".18.B",".18.C",".1.A", ".1.B", ".1.C", ".21.B",".21.C",".2.A", ".2.B", ".2.C", ".31.A",".31.B",".31.C",".3.A", ".3.B", ".3.C",".49.A",".49.B",".49.C",".4.A", ".4.B",".4.C", ".59.A",".59.B",".59.C",".5.A",".5.B", ".5.C", ".61.A",".61.B",".61.C",".66.B",".66.C",".68.A",".68.B",".68.C",".6.A", ".6.B", ".6.C", ".76.A",".76.B",".76.C",".77.A",".77.B",".77.C",".7.A",".7.B", ".7.C", ".8.A", ".8.B", ".8.C",".9.A", ".9.B", ".9.C", ".GCAnc.A" ,".GCAnc.B",".GCAnc.C")
colnames(x.GC) <- samplenamesGC
View(x.GC$samples)
View(x.GC$counts)
x.GC
group.GC <- as.factor(c(".11.",".11.",".11.",".18.",".18.",".18.",".1.", ".1.", ".1.", ".21.",".21.",".2.", ".2.", ".2.", ".31.",".31.",".31.",".3.", ".3.", ".3.",".49.",".49.",".49.",".4.", ".4.",".4.", ".59.",".59.",".59.",".5.",".5.", ".5.", ".61.",".61.",".61.",".66.",".66.",".68.",".68.",".68.",".6.", ".6.", ".6.", ".76.",".76.",".76.",".77.",".77.",".77.",".7.",".7.", ".7.", ".8.", ".8.", ".8.",".9.", ".9.", ".9.", ".GCAnc." ,".GCAnc.",".GCAnc."))
write.csv(x.GC$counts,file="raw_counts.csv")
length(group.GC)
levels(group.GC)
nlevels(group.GC)
x.GC$samples$group <- group.GC
txdb <- TxDb.Scerevisiae.UCSC.sacCer2.sgdGene
columns(txdb)
geneidGC <- rownames(x.GC)
colms <- c("TXSTART","TXEND")
genesGC <- ensembldb::select(txdb, keys=geneidGC, columnns="GENEID","TXCHROM" , keytype="GENEID")
genesGC
genesGC <- genesGC[!duplicated(genesGC$GENEID),]
remove1 <- "chrM"
genesGC.test <- genesGC[-(grep(paste0(remove1,"$"),genesGC$TXCHROM,perl=TRUE)),]
genesGC.test <- na.omit(genesGC.test)
genesGC.test
genesGC <- genesGC.test
lengths <- transcriptLengths(txdb)
genesGC <- merge(genesGC,lengths,by.x="GENEID",by.y="gene_id")
x.GC$genes <- genesGC
x.GC$genes$tx_len
cpmGC <- cpm(x.GC,normalized.lib.sizes = FALSE, prior.count = 0.5)
View(cpmGC)
lcpmGC <- cpm(x.GC,normalized.lib.sizes = FALSE, prior.count = 0.5, log=TRUE)
View(lcpmGC)
rpkmGC <- rpkm(x.GC,x.GC$genes$tx_len, normalized.lib.sizes = FALSE, prior.count = 0.5)
View(rpkmGC)
par(mfrow=c(1,2))
col.groupGC <- group.GC
levels(col.groupGC)
nlevels(col.groupGC)
colorsGC = colorRampPalette(brewer.pal(8,"Set1"))(21)
levels(col.groupGC) <- colorsGC
col.groupGC
col.groupGC <- as.character(col.groupGC)
{
pdf(file="sample_groupsGC.pdf")
plotMDS(lcpmGC, labels=group.GC, col=col.groupGC)
title(main="Sample groups")
}
glMDSPlot(lcpmGC, labels=paste(group.GC),groups=x.GC$samples[,c(3)], launch=TRUE)
levels(x.GC$samples$group)
x.GC <- estimateDisp(x.GC,verbose=FALSE,design=designGC)
designGC <- model.matrix(~group.GC)
designGC
x.GC <- estimateDisp(x.GC,verbose=FALSE,design=NULL)
x.GC.des <- estimateDisp(x.GC,verbose=FALSE,design=designGC)
x.GC.des <- estimateDisp(x.GC,verbose=FALSE,design=designGC)
et <- exactTest(x.GC,pair=c(".GCAnc.",".11."))
topTMM <- topTags(etTMM,adjust.method = "BH")
top1 <- topTags(et,adjust.method = "BH")
View(top1)
x.GC.des <- estimateDisp(x.GC,verbose=FALSE,design=designGC)
etdes <- exactTest(x.GC.des,pair=c(".GCAnc.",".11."))
topdes <- topTags(etdes,adjust.method = "BH")
View(topdes)
write.csv(rpkmGC,file="rpkm.csv")
