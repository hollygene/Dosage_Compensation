#  par(mfrow=c(1,2))
#  lcpm1 <- cpm(x3,log=TRUE)
#boxplot(lcpm,las=2,col=col,main="")
#title(main="A. Example: unnormalized data",ylab="Log-cpm")
#x4 <- calcNormFactors(x3)
#lcpm.4 <- cpm(x4, log=TRUE)
#boxplot(lcpm.4,las=2, col=col, main="")
#title(main="B. Example: normalized data", ylab="Log-cpm")
#}
#without messing with the data
#{
#  pdf("norm.vs.unnormGC.pdf")
#  par(mfrow=c(1,2))
#  lcpmGC <- cpm(x.GC,log=TRUE)
#boxplot(lcpmGC,las=2,col=colGC,main="")
#title(main="A. Example: unnormalized data",ylab="Log-cpm")
#lcpmGC1 <- cpm(x.normGC.test, log=TRUE)
#boxplot(lcpmGC1,las=2, col=colGC, main="")
#title(main="B. Example: normalized data", ylab="Log-cpm")
#}
#{
# pdf("norm.vs.unnormMA.pdf")
#  par(mfrow=c(1,2))
#  lcpmMA <- cpm(x.MA,log=TRUE)
#boxplot(lcpmMA,las=2,col=colMA,main="")
#title(main="A. Example: unnormalized data",ylab="Log-cpm")
#lcpmMA1 <- cpm(x.normMA, log=TRUE)
#boxplot(lcpmMA1,las=2, col=colMA, main="")
#title(main="B. Example: normalized data", ylab="Log-cpm")
#}
lcpmGC <- data.frame(names=row.names(lcpmGC),lcpmGC)
rownames(lcpmGC) <- c()
genes <- data.frame(x.GC$genes$GENEID, x.GC$genes$TXCHROM)
lcpmGC.test <- merge(genes,lcpmGC, by.x="x.GC.genes.GENEID", by.y="names")
lcpmGC <- lcpmGC.test
nchrm <- nlevels(lcpmGC$x.GC.genes.TXCHROM)
lcpmGC$x.GC.genes.TXCHROM
lcpmGC
lcpmGC
remove <- c("__no_feature", "__ambiguous","__alignment_not_unique","__too_low_aQual","__not_aligned")
remove <- c("__no_feature", "__ambiguous","__alignment_not_unique","__too_low_aQual","__not_aligned")
lcpmGC <- lcpmGC[setdiff(rownames(lcpmGC),remove),]
x.GC$samples$group
x.GC$samples$group
cpmGC
length(x.GC$samples$group)
remove <- c("__no_feature", "__ambiguous","__alignment_not_unique","__too_low_aQual","__not_aligned")
lcpmGC <- lcpmGC[setdiff(rownames(lcpmGC),remove),]
x.GC$samples$group
cpmGC
length(x.GC$samples$group)
names <- colnames(lcpmGC)
length(lcpmGC)
nrow(lcpmGC)
rm(i)
View(lcpmGC)
colnames(lcpmGC) <- c("gene","chr", ".11.A",".11.B",".11.C",".18.A",".18.B",".18.C",".1.A", ".1.B", ".1.C", ".21.B",".21.C",".2.A", ".2.B", ".2.C", ".31.A",".31.B",".31.C",".3.A", ".3.B", ".3.C",".49.A",".49.B",".49.C",".4.A", ".4.B",".4.C", ".59.A",".59.B",".59.C",".5.A",".5.B", ".5.C", ".61.A",".61.B",".61.C",".66.B",".66.C",".68.A",".68.B",".68.C",".6.A", ".6.B", ".6.C", ".76.A",".76.B",".76.C",".77.A",".77.B",".77.C",".7.A",".7.B", ".7.C", ".8.A", ".8.B", ".8.C",".9.A", ".9.B", ".9.C", ".GCAnc.A" ,".GCAnc.B",".GCAnc.C")
names <- colnames(lcpmGC)
lines.G <- c(".11.",".18.",".1.",".21.",".2.",".31.",".3.",".49.",".4.",".59.",".5.",".61.",".66.",".68.",".6.", ".76.",".77.",".7.",".8.", ".9.",".GCAnc.")
i=1
rm(i)
v <- matrix(data=NA,nrow=nrow(lcpmGC),ncol=length(lines.G))
is.list(v)
for (i in 1:length(lines.G)) {
ind <- grep(as.character(lines.G[i]),names)
cols <- lcpmGC[,ind]
cols <- matrix(apply(cols,1,var))
rownames(cols) <- c()
colnames(cols) <- c()
#View(cols)
v[,i] <- cols
# den[,i] <- density(v[,i])
#lines(den[i]$x,den[i]$y,col=colGC[i],lwd=2)
}
colnames(v) <- lines.G
v <- cbind(genes$x.GC.genes.TXCHROM,v)
v <- data.frame(v)
mean <- matrix(data=NA,nrow=nrow(lcpmGC),ncol=length(lines.G))
is.list(mean)
for (i in 1:length(lines.G)) {
ind <- grep(as.character(lines.G[i]),names)
cols <- lcpmGC[,ind]
#View(cols)
rownames(cols) <- c()
colnames(cols) <- c()
m <- matrix(apply(cols,1,mean))
mean[,i] <- m
# den[,i] <- density(v[,i])
#lines(den[i]$x,den[i]$y,col=colGC[i],lwd=2)
}
colnames(mean) <- lines.G
mean <- cbind(as.factor(genes$x.GC.genes.TXCHROM),mean)
mean <- data.frame(mean)
std <- matrix(data=NA,nrow=nrow(lcpmGC),ncol=length(lines.G))
length(lcpmGC)
is.list(std)
for (i in 1:length(lines.G)) {
ind <- grep(as.character(lines.G[i]),names)
cols <- lcpmGC[,ind]
cols <- matrix(apply(cols,1,sd))
rownames(cols) <- c()
colnames(cols) <- c()
#View(cols)
std[,i] <- cols
# den[,i] <- density(v[,i])
#lines(den[i]$x,den[i]$y,col=colGC[i],lwd=2)
}
colnames(std) <- lines.G
std <- cbind(genes$x.GC.genes.TXCHROM,std)
std <- data.frame(std)
dim(mean)
dim(v)
dim(std)
cv <- matrix(data=NA,nrow=nrow(mean),ncol=length(ncol(mean)))
cv <- std[,2:22]/mean[,2:22]
dim(cv)
colnames(cv) <- lines.G
cv <- cbind(genes$x.GC.genes.TXCHROM,cv)
par(mar=c(1,1,1,1))
line.G <- c(".GCAnc.",".11.",".18.",".1.",".21.",".2.",".31.",".3.",".49.",".4.",".59.",".5.",".61.",".66.",".68.",".6.", ".76.",".77.",".7.",".8.", ".9.")
ggplot () + geom_point(aes(x=mean[,2],y=v[,2],col=factor(mean$V1))) + scale_y_log10() + labs(title=paste("Mean-Variance Relationship Line",line.G[2]), y="variance",x="mean")
ggplotly()
View(mean)
ggplot () + geom_point(aes(x=mean[,18],y=v[,18],col=factor(mean$V1))) + scale_y_log10() + labs(title=paste("Mean-Variance Relationship Line",line.G[18]), y="variance",x="mean")
ggplotly()
get.points <- function(line) {
ggplot () + geom_point(aes(x=mean[,line],y=v[,line],col=factor(mean$V1))) + scale_y_log10() + labs(title=paste("Mean-Variance Relationship Line",line.G[line]), y="variance",x="mean")
ggplotly()
}
get.points(2)
for(i in 2:21) {
get.points(i)
}
get.points(2)
get.points(3)
mean <- cbind(as.factor(genes$x.GC.genes.GENEID),mean)
mean <- data.frame(mean)
View(mean)
v <- cbind(genes$x.GC.genes.GENEID,v)
v <- data.frame(v)
std <- cbind(genes$x.GC.genes.GENEID,std)
std <- data.frame(std)
dim(mean)
dim(v)
dim(std)
cv <- matrix(data=NA,nrow=nrow(mean),ncol=length(ncol(mean)))
cv <- std[,3:23]/mean[,3:23]
dim(cv)
colnames(cv) <- lines.G
cv <- cbind(genes$x.GC.genes.TXCHROM,cv)
cv <- cbind(genes$x.GC.genes.GENEID,cv)
line.G <- c("NA",".GCAnc.",".11.",".18.",".1.",".21.",".2.",".31.",".3.",".49.",".4.",".59.",".5.",".61.",".66.",".68.",".6.", ".76.",".77.",".7.",".8.", ".9.")
line.G <- c("NA",".GCAnc.",".11.",".18.",".1.",".21.",".2.",".31.",".3.",".49.",".4.",".59.",".5.",".61.",".66.",".68.",".6.", ".76.",".77.",".7.",".8.", ".9.")
line.G
line.G <- c("NA","NA",".GCAnc.",".11.",".18.",".1.",".21.",".2.",".31.",".3.",".49.",".4.",".59.",".5.",".61.",".66.",".68.",".6.", ".76.",".77.",".7.",".8.", ".9.")
i=3
line.G[i]
length(lines.G)
length(line.G)
length(mean)
View(mean)
line.G <- c("NA",".GCAnc.",".11.",".18.",".1.",".21.",".2.",".31.",".3.",".49.",".4.",".59.",".5.",".61.",".66.",".68.",".6.", ".76.",".77.",".7.",".8.", ".9.")
i=3
line.G[i]
mean[,i]
for (i in 3:23) {
pdf(paste("Mean-Variance Relationship",line.G[i],".pdf",sep=""))
print(ggplot () + geom_point(aes(x=mean[,i],y=v[,i],col=factor(mean$V1))) + scale_y_log10() + labs(title=paste("Mean-Variance Relationship Line",line.G[i]), y="variance",x="mean"))
dev.off()
}
get.points <- function(line) {
ggplot () + geom_point(aes(x=mean[,line],y=v[,line],col=factor(mean$V1))) + scale_y_log10() + labs(title=paste("Mean-Variance Relationship Line",line.G[line]), y="variance",x="mean")
ggplotly()
}
get.points(3)
get.points(3)
View(mean)
View(cv)
View(v)
glMDSPlot(lcpmGC, labels=paste(group.GC),groups=x.GC$samples[,c(3)], launch=TRUE)
glMDSPlot(lcpmGC, labels=paste(group.GC),groups=x.GC$samples[,c(3)], launch=TRUE)
lcpmGC <- cpm(x.GC,log=TRUE)
par(mfrow=c(1,2))
col.groupGC <- group.GC
levels(col.groupGC)
nlevels(col.groupGC)
colorsGC = colorRampPalette(brewer.pal(8,"Set1"))(21)
levels(col.groupGC) <- colorsGC
col.groupGC
col.groupGC <- as.character(col.groupGC)
{
pdf(file="sample_groupsGC.pdf")
plotMDS(lcpmGC, labels=group.GC, col=col.groupGC)
title(main="Sample groups")
}
glMDSPlot(lcpmGC, labels=paste(group.GC),groups=x.GC$samples[,c(3)], launch=TRUE)
levels(x.GC$samples$group)
designGC <- model.matrix(~0+group.GC)
designGC
x.GC <- estimateDisp(x.GC,verbose=FALSE,design = designGC)
colnames(x.GC) <- c(".11.A",".11.B",".11.C",".18.A",".18.B",".18.C",".1.A", ".1.B", ".1.C", ".21.B",".21.C",".2.A", ".2.B", ".2.C", ".31.A",".31.B",".31.C",".3.A", ".3.B", ".3.C",".49.A",".49.B",".49.C",".4.A", ".4.B",".4.C", ".59.A",".59.B",".59.C",".5.A",".5.B", ".5.C", ".61.A",".61.B",".61.C",".66.B",".66.C",".68.A",".68.B",".68.C",".6.A", ".6.B", ".6.C", ".76.A",".76.B",".76.C",".77.A",".77.B",".77.C",".7.A",".7.B", ".7.C", ".8.A", ".8.B", ".8.C",".9.A", ".9.B", ".9.C", ".GCAnc.A" ,".GCAnc.B",".GCAnc.C")
x.GC$counts
x.GC$samples$group
groups.GC <- x.GC$samples$group
groups.GC
lines.G
pval <- matrix(data=NA, nrow=nrow(x.GC),ncol=length(lines.G))
str(pval)
lines.G
rm(i)
anc <- lines.G[21]
anc
x.GC
i=1
rm(i)
for (i in 1:length(lines.G)) {
et <- exactTest(x.GC, pair=c((lines.G[i]),anc))
ind <- et$table
ind2 <- ind[,3]
#rownames(ind2) <- c()
#colnames(ind2) <- c()
#View(cols)
length(ind2)
pval[,i] <- ind2
# den[,i] <- density(v[,i])
#lines(den[i]$x,den[i]$y,col=colGC[i],lwd=2)
}
pval <- data.frame(pval)
colnames(pval) <- lines.G
pval <- cbind(genes$x.GC.genes.TXCHROM,pval)
pval <- cbind(genes$x.GC.genes.GENEID,pval)
lines.GC
line.GC <- c("na","1",   "11" , "18" , "2"  , "21",  "3"  , "31" , "4",  "49" , "5"  , "59" , "6",   "61" ,"66",  "68",  "7" ,  "76"  ,"77",  "8" ,  "9")
length(line.GC)
i=20
rm(i)
pval[,21]
colnames(pval)
names.p <- colnames(pval)
names.cv <- colnames(cv)
str(cv)
str(pval)
rm(i)
length(val)
lines.G[1]
rm(i)
for (i in 1:20) {
pdf(paste("pval.vs.cv.Line",lines.G[i],".pdf",sep=""))
p <- grep(paste("^",(lines.G[i]),"$",sep=""),names.p)
val <- pval[,p]
c <- grep(paste("^",(lines.G[i]),"$",sep=""),names.cv)
v <- cv[,c]
corTest.cv <- cor.test(val,v)
#  corTest.cv <- c(corTest.cv$p.value)
print(ggplot () + geom_point(aes(x=val,y=v,col=pval[,1])) + scale_y_log10()  + labs(title=(paste("Pval vs CV Line",lines.G[i])), y="CV",x="pval") + annotate("text",x=0.9,y=100,label=paste("pval=",corTest.cv$p.value,sep="")) + geom_vline(xintercept=0.05))
dev.off()
}
pvscv <- function(line) {
p <- grep(paste("^",(lines.G[line]),"$",sep=""),names.p)
val <- pval[,p]
c <- grep(paste("^",(lines.G[line]),"$",sep=""),names.cv)
v <- cv[,c]
corTest.cv <- cor.test(val,v)
#  corTest.cv <- c(corTest.cv$p.value)
print(ggplot () + geom_point(aes(x=val,y=v,col=pval[,1])) + scale_y_log10()  + labs(title=(paste("Pval vs CV Line",lines.G[line])), y="CV",x="pval") + annotate("text",x=0.9,y=100,label=paste("pval=",corTest.cv$p.value,sep="")) + geom_vline(xintercept=0.05))
ggplotly()
}
pvscv(3)
lines.G
pvscv <- function(line) {
p <- grep(paste("^",(line.G[line]),"$",sep=""),names.p)
val <- pval[,p]
c <- grep(paste("^",(line.G[line]),"$",sep=""),names.cv)
v <- cv[,c]
corTest.cv <- cor.test(val,v)
#  corTest.cv <- c(corTest.cv$p.value)
print(ggplot () + geom_point(aes(x=val,y=v,col=pval[,1])) + scale_y_log10()  + labs(title=(paste("Pval vs CV Line",line.G[line])), y="CV",x="pval") + annotate("text",x=0.9,y=100,label=paste("pval=",corTest.cv$p.value,sep="")) + geom_vline(xintercept=0.05))
ggplotly()
}
pvscv(3)
line=3
p <- grep(paste("^",(line.G[line]),"$",sep=""),names.p)
val <- pval[,p]
c <- grep(paste("^",(line.G[line]),"$",sep=""),names.cv)
v <- cv[,c]
corTest.cv <- cor.test(val,v)
print(ggplot () + geom_point(aes(x=val,y=v,col=pval[,1])) + scale_y_log10()  + labs(title=(paste("Pval vs CV Line",line.G[line])), y="CV",x="pval") + annotate("text",x=0.9,y=100,label=paste("pval=",corTest.cv$p.value,sep="")) + geom_vline(xintercept=0.05))
print(ggplot () + geom_point(aes(x=val,y=v,col=pval[,1])) + scale_y_log10()  + labs(title=(paste("Pval vs CV Line",line.G[line])), y="CV",x="pval") + annotate("text",x=0.9,y=100,label=paste("pval=",corTest.cv$p.value,sep="")) + geom_vline(xintercept=0.05))
print(ggplot () + geom_point(aes(x=val,y=v,col=pval[,2])) + scale_y_log10()  + labs(title=(paste("Pval vs CV Line",line.G[line])), y="CV",x="pval") + annotate("text",x=0.9,y=100,label=paste("pval=",corTest.cv$p.value,sep="")) + geom_vline(xintercept=0.05))
ggplotly()
pvscv <- function(line) {
p <- grep(paste("^",(line.G[line]),"$",sep=""),names.p)
val <- pval[,p]
c <- grep(paste("^",(line.G[line]),"$",sep=""),names.cv)
v <- cv[,c]
corTest.cv <- cor.test(val,v)
#  corTest.cv <- c(corTest.cv$p.value)
print(ggplot () + geom_point(aes(x=val,y=v,col=pval[,2])) + scale_y_log10()  + labs(title=(paste("Pval vs CV Line",line.G[line])), y="CV",x="pval") + annotate("text",x=0.9,y=100,label=paste("pval=",corTest.cv$p.value,sep="")) + geom_vline(xintercept=0.05))
ggplotly()
}
pvscv(3)
pvscv(4)
View(mean)
get.points(18)
get.points <- function(line) {
ggplot () + geom_point(aes(x=mean[,line],y=v[,line],col=factor(mean$V1))) + scale_y_log10() + labs(title=paste("Mean-Variance Relationship Line",line.G[line]), y="variance",x="mean")
ggplotly()
}
get.points(18)
v <- matrix(data=NA,nrow=nrow(lcpmGC),ncol=length(lines.G))
is.list(v)
for (i in 1:length(lines.G)) {
ind <- grep(as.character(lines.G[i]),names)
cols <- lcpmGC[,ind]
cols <- matrix(apply(cols,1,var))
rownames(cols) <- c()
colnames(cols) <- c()
#View(cols)
v[,i] <- cols
# den[,i] <- density(v[,i])
#lines(den[i]$x,den[i]$y,col=colGC[i],lwd=2)
}
rm(i)
v <- matrix(data=NA,nrow=nrow(lcpmGC),ncol=length(lines.G))
is.list(v)
for (i in 1:length(lines.G)) {
ind <- grep(as.character(lines.G[i]),names)
cols <- lcpmGC[,ind]
cols <- matrix(apply(cols,1,var))
rownames(cols) <- c()
colnames(cols) <- c()
#View(cols)
v[,i] <- cols
# den[,i] <- density(v[,i])
#lines(den[i]$x,den[i]$y,col=colGC[i],lwd=2)
}
i=1
lines.G[i]
grep(as.character(lines.G[i]),names)
ind <- grep(as.character(lines.G[i]),names)
lcpmGC[,ind]
cols <- lcpmGC[,ind]
matrix(apply(cols,1,var))
cols <- matrix(apply(cols,1,var))
View(v)
for (i in 1:length(lines.G)) {
ind <- grep(as.character(lines.G[i]),names)
cols <- lcpmGC[,ind]
cols <- matrix(apply(cols,1,var))
rownames(cols) <- c()
colnames(cols) <- c()
#View(cols)
v[,i] <- cols
# den[,i] <- density(v[,i])
#lines(den[i]$x,den[i]$y,col=colGC[i],lwd=2)
}
colnames(v) <- lines.G
v <- cbind(genes$x.GC.genes.TXCHROM,v)
v <- cbind(genes$x.GC.genes.GENEID,v)
View(v)
View(mean)
v <- matrix(data=NA,nrow=nrow(lcpmGC),ncol=length(lines.G))
is.list(v)
for (i in 1:length(lines.G)) {
ind <- grep(as.character(lines.G[i]),names)
cols <- lcpmGC[,ind]
cols <- matrix(apply(cols,1,var))
rownames(cols) <- c()
colnames(cols) <- c()
#View(cols)
v[,i] <- cols
# den[,i] <- density(v[,i])
#lines(den[i]$x,den[i]$y,col=colGC[i],lwd=2)
}
colnames(v) <- lines.G
v <- cbind(as.factor(genes$x.GC.genes.TXCHROM),v)
v <- cbind(as.factor(genes$x.GC.genes.GENEID),v)
v <- data.frame(v)
View(v)
knitr::opts_chunk$set(echo = TRUE)
#load in edgeR and limma
library(limma)
library(Glimma)
library(edgeR)
library(dplyr)
library(TxDb.Scerevisiae.UCSC.sacCer2.sgdGene)
library(RColorBrewer)
library(gplots)
library(magicfor)
library(tidyr)
library(data.table)
library(stringr)
library(ggplot2)
library(plotly)
#########################################
#load files into R as vector
files.GC <- list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/GC",pattern = "*.txt", full.names = TRUE)
files.GC
#files.MA <- list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/4_3_18/MA",pattern = "*.txt", full.names = TRUE)
#files.MA
#load in data from files using readDGE from edgeR
#getting out just the EntrezID and read count, neglecting genelength
x.GC <- readDGE(files.GC,columns=c(1,2))
#x.MA <- readDGE(files.MA,columns=c(1,2))
#check the parameters
class(x.GC)
#class(x.MA)
#and dimensions
dim(x.GC)
#dim(x.MA)
#organize sample information
#change sample names so they are simpler
files.GC
samplenames.GC <- tools::file_path_sans_ext(list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/GC",pattern = "*.txt", full.names = FALSE))
samplenames.GC
#samplenames.GC <- c("G11B","G11C","G18B","G18C","G1B","G1C","G11A","G21C","G2A","G2B","G2C","G31B","G31C","G3A","G3B","G3C","G49B","G49C","G4B","G4C","G59B","G59C","G5A","G5B","G5C","G61B","G61C","G66C","G69B","G69C","G6A","G6B","G6C","G76B","G76C","G77B","G77C","G7B","G7C","G8B","G8C","G9A","G9B","G9C","GAB","GAC","G66B","G18A","G21A","G31A","G4A","G49A","G61A","G7A","G8A")
#length(samplenames.GC)
#put filenames into DGEList as column names
colnames(x.GC) <-c(".11.A",".11.B",".11.C",".18.A",".18.B",".18.C",".1.A", ".1.B", ".1.C", ".21.B",".21.C",".2.A", ".2.B", ".2.C", ".31.A",".31.B",".31.C",".3.A", ".3.B", ".3.C",".49.A",".49.B",".49.C",".4.A", ".4.B",".4.C", ".59.A",".59.B",".59.C",".5.A",".5.B", ".5.C", ".61.A",".61.B",".61.C",".66.B",".66.C",".68.A",".68.B",".68.C",".6.A", ".6.B", ".6.C", ".76.A",".76.B",".76.C",".77.A",".77.B",".77.C",".7.A",".7.B", ".7.C", ".8.A", ".8.B", ".8.C",".9.A", ".9.B", ".9.C", ".GCAnc.A" ,".GCAnc.B",".GCAnc.C")
x.GC$counts
###################################################
#group samples together according to experiment
x.GC
#View(x.GC$samples)
#files.MA
#samplenames.MA <- c("M112B","M112C","M115B","M115C","M117B","M117C","M123B","M123C","M141B","M141C","M152B","M152C","M29B","M29C","M50B","MAC","M1A","M1B","M1C","M2A","M2B","M2C","M3A","M3B","M3C","M4A","M4B","M4C","M5A","M5B","M5C","M6A","M6C","M6B","M7A","M7B","M7C","M8A","M8B","M8C","M9A","M9B","M9C","M11A","M11B","M11C","15A","15B","15C","28A","28B","28C","88A","88B","88C","108A","108B","108C","119A","119B","119C","OMAA","OMAB","OMAC")
#length(samplenames.MA)
#colnames(x.MA) <- samplenames.MA
group.GC <- as.factor(c(".11.",".11.",".11.",".18.",".18.",".18.",".1.", ".1.", ".1.", ".21.",".21.",".2.", ".2.", ".2.", ".31.",".31.",".31.",".3.", ".3.", ".3.",".49.",".49.",".49.",".4.", ".4.",".4.", ".59.",".59.",".59.",".5.",".5.", ".5.", ".61.",".61.",".61.",".66.",".66.",".68.",".68.",".68.",".6.", ".6.", ".6.", ".76.",".76.",".76.",".77.",".77.",".77.",".7.",".7.", ".7.", ".8.", ".8.", ".8.",".9.", ".9.", ".9.", ".GCAnc." ,".GCAnc.",".GCAnc."))
length(group.GC)
levels(group.GC)
nlevels(group.GC)
x.GC$samples$group <- group.GC
#group.MA <- as.factor(c("M112","M112","M115","M115","M117","M117","M123","M123","M141","M141","M152","M152","M29","M29","M50","MA","M1","M1","M1","M2","M2","M2","M3","M3","M3","M4","M4","M4","M5","M5","M5","M6","M6","M6","M7","M7","M7","M8","M8","M8","M9","M9","M9","M11","M11","M11","M15","M15","M15","M28","M28","M28","M88","M88","M88","M108","M108","M108","M119","M119","M119","MAA","MAA","MAA"))
#length(group.MA)
#levels(group.MA)
#nlevels(group.MA)
#x.MA$samples$group <- group.MA
#come back to this later
#run <- as.factor(rep(c(1,2), c(16,48)))
#x.MA$samples$run <- run
#ploidy <- as.factor(rep(c("tri","eu","tri","dbl","eu","tri","dbl","tri","eu","tri","mon","eu","eu","eu","tri","eu","eu","tri","eu","tri","seg","eu","eu","tri","tri","eu","eu","eu","eu","eu"),c(2,3,3,2,3,3,3,3,3,2,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3)))
#x$samples$ploidy <- ploidy
#x.MA$samples
#organize the gene annotations
#install mus.musuclus package
#source("https://bioconductor.org/biocLite.R")
#biocLite("BSgenome.Scerevisiae.UCSC.sacCer3")
#library(BSgenome.Scerevisiae.UCSC.sacCer3)
#geneid <- rownames(x)
#genes <- select(BSgenome.Scerevisiae.UCSC.sacCer3, keys=geneid, columns="SYMBOL","TXCHROM",keytype="GENENAME")
#dim(genes)
#head(genes)
#biocLite("BSgenome.Scerevisiae.UCSC.sacCer1")
#library(BSgenome.Scerevisiae.UCSC.sacCer1)
#genes <- select(BSgenome.Scerevisiae.UCSC.sacCer3, keys=geneid, columns="SYMBOL","TXCHROM",keytype="GENENAME")
#source("https://bioconductor.org/biocLite.R")
#biocLite("OrganismDbi")
#library(OrganismDbi)
#source("https://bioconductor.org/biocLite.R")
#biocLite("org.Sc.sgd.db")
#library(org.Sc.sgd.db)
#org.Sc.sgd.db
#yeast <- org.Sc.sgd.db
#keytypes(yeast)
#columns(yeast)
#genes <- select(org.Sc.sgd.db, keys=geneid, columns="TXCHR","CHRLENGTHS","ENSEMBL",keytype="GENENAME")
#biocLite("TxDb.Scerevisiae.UCSC.sacCer2.sgdGene")
#library(TxDb.Scerevisiae.UCSC.sacCer2.sgdGene)
txdb <- TxDb.Scerevisiae.UCSC.sacCer2.sgdGene
txdb
#txs <- transcripts(txdb)
#txs
#txby <- transcriptsBy(txdb,by="gene")
#txby
#si <- seqinfo(txdb)
#si
#txby <- transcriptsBy(txdb, by="gene")
#si <- seqinfo(txby)
#si
#head(seqlevels(txdb))
#seqlevelsStyle(txdb)
#seqlevelsStyle(txdb) <- "ensembl"
#head(seqlevels(txdb))
#seqlevelsStyle(txdb) <- "UCSC"
#head(seqlevels(txdb))
#want to ignore the mitochondria
#isActiveSeq(txdb)["chrM"] <- FALSE
#head(isActiveSeq(txdb), n=18)
#and 2 micron
#isActiveSeq(txdb)["2micron"] <- FALSE
#head(isActiveSeq(txdb), n=18)
columns(txdb)
#want TXCHROM
#want GENEID
geneidGC <- rownames(x.GC)
#geneidMA <- rownames(x.MA)
genesGC <- select(txdb, keys=geneidGC, columns="TXCHROM","GENEID",keytype="GENEID")
#View(cpmGC)
lcpmGC <- data.frame(names=row.names(lcpmGC),lcpmGC)
group.GC <- as.factor(c(".11.",".11.",".11.",".18.",".18.",".18.",".1.", ".1.", ".1.", ".21.",".21.",".2.", ".2.", ".2.", ".31.",".31.",".31.",".3.", ".3.", ".3.",".49.",".49.",".49.",".4.", ".4.",".4.", ".59.",".59.",".59.",".5.",".5.", ".5.", ".61.",".61.",".61.",".66.",".66.",".68.",".68.",".68.",".6.", ".6.", ".6.", ".76.",".76.",".76.",".77.",".77.",".77.",".7.",".7.", ".7.", ".8.", ".8.", ".8.",".9.", ".9.", ".9.", ".GCAnc." ,".GCAnc.",".GCAnc."))
length(group.GC)
levels(group.GC)
nlevels(group.GC)
x.GC$samples$group <- group.GC
txdb <- TxDb.Scerevisiae.UCSC.sacCer2.sgdGene
txdb
columns(txdb)
geneidGC <- rownames(x.GC)
genesGC <- select(txdb, keys=geneidGC, columns="TXCHROM","GENEID",keytype="GENEID")
genesGC
genesGC <- select(txdb, keys=geneidGC, columns="TXCHROM","GENEID",keytype="GENEID")
