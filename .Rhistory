abline(v=0, lty=3)
for (i in 2:nsamples) {
den <- density(lcpm[,i])
lines(den$x,den$y,col=col[i],lwd=2)
}
legend("topright",samplenames1,text.col=col,bty="n")
#normalization
x <- calcNormFactors(x, method="TMM")
x$samples$norm.factors
#visually see the data normalized by screwing with the data artificially to make it look a lot different
x2 <- x
x2$samples$norm.factors <- 1
x2$counts[,1] <- ceiling(x2$counts[,1]*0.05)
x2$counts[,2] <- x$counts[,2]*5
par(mfrow=c(1,2))
lcpm <- cpm(x2,log=TRUE)
boxplot(lcpm,las=2,col=col,main="")
title(main="A. Example: unnormalized data",ylab="Log-cpm")
x2 <- calcNormFactors(x2)
x2$samples$norm.factors
lcpm <- cpm(x2, log=TRUE)
boxplot(lcpm,las=2, col=col, main="")
title(main="B. Example: normalized data", ylab="Log-cpm")
levels(col.line) <- brewer.pal(nlevels(col.line),"Set2")
col.line <- x$samples$line
levels(col.line) <- brewer.pal(nlevels(col.line),"Set2")
col.line <- as.character(col.line)
plotMDS(lcpm, labels=line, col=col.line, dim=c(3,4))
col.line <- x$samples$line
levels(col.line) <- brewer.pal(nlevels(col.line),"Set2")
col.line <- as.character(col.line)
col.line <- x$samples$line
levels(col.line) <- brewer.pal(nlevels(col.line),"Set2")
col.line <- as.character(col.line)
plotMDS(lcpm, labels=line, col=col.line, dim=c(3,4))
library(limma)
library(edgeR)
library(dplyr)
library(RColorBrewer)
lcpm <- cpm(x,log=TRUE)
par(mfrow=c(1,2))
col.group <- group
levels(col.group) <- brewer.pal(nlevels(col.group), "Set1")
col.group <- as.character(col.group)
col.ploidy <- x$samples$ploidy
ploidy
length(ploidy)
levels(col.ploidy) <- brewer.pal(nlevels(col.ploidy),"Set2")
col.ploidy <- as.character(col.ploidy)
plotMDS(lcpm, labels=group, col=col.group)
title(main="A. Sample groups")
plotMDS(lcpm, labels=ploidy, col=col.ploidy, dim=c(3,4))
title(main="B. Ploidy")
col.line <- x$samples$line
levels(col.line) <- brewer.pal(nlevels(col.line),"Set2")
col.line <- as.character(col.line)
plotMDS(lcpm, labels=line, col=col.line, dim=c(3,4))
col.line <- x$samples$line
levels(col.line) <- brewer.pal(nlevels(col.line),"Set3")
col.line <- as.character(col.line)
col.line <- x$samples$line
levels(col.line) <- brewer.pal(nlevels(col.line),"Set1")
col.line <- as.character(col.line)
v <- voom(x, design,plot=TRUE)
#make MDS plots
lcpm <- cpm(x,log=TRUE)
par(mfrow=c(1,2))
col.group <- group
levels(col.group) <- brewer.pal(nlevels(col.group), "Set1")
col.group <- as.character(col.group)
col.ploidy <- x$samples$ploidy
ploidy
length(ploidy)
levels(col.ploidy) <- brewer.pal(nlevels(col.ploidy),"Set2")
col.ploidy <- as.character(col.ploidy)
plotMDS(lcpm, labels=group, col=col.group)
title(main="A. Sample groups")
plotMDS(lcpm, labels=ploidy, col=col.ploidy, dim=c(3,4))
title(main="B. Ploidy")
#can also look at an interactive MDS plot using glimma
library(Glimma)
glMDSPlot(lcpm, labels=paste(group,ploidy,sep="_"),groups=x$samples[,c(2,5)], launch=TRUE)
#make a design matrix
#this is under the assumption that the data is normally distributed
design <- model.matrix(~0+line+ploidy+group)
colnames(design) <- gsub("group","",colnames(design))
design
#make contrasts matrix
contr.matrix <- makeContrasts(
X1vsGCA = lineX1-lineGCA,
X11vsGCA = lineX11-lineGCA,
X112vsMAnc = lineX112-lineMAA,
X115vsMAnc = lineX115-lineMAA,
X117vsMAnc = lineX117-lineMAA,
X123vsMAnc = lineX123-lineMAA,
X141vsMAnc= lineX141-lineMAA,
X152vsMAnc = lineX152-lineMAA,
X18vsGCA = lineX18-lineGCA,
X2vsGCA = lineX2-lineGCA,
X21vsGCA = lineX21-lineGCA,
X29vsMAnc = lineX29-lineMAA,
X3vsGCA = lineX3-lineGCA,
X31vsGCA = lineX31-lineGCA,
X4vsGCA = lineX4-lineGCA,
X49vsGCA = lineX49-lineGCA,
X5vsGCA = lineX5-lineGCA,
X50vsMAnc = lineX50-lineMAA,
X59vsGCA = lineX59-lineGCA,
X6vsGCA = lineX6-lineGCA,
X61vsGCA = lineX61-lineGCA,
X66vsGCA = lineX66-lineGCA,
X69vsGCA = lineX69-lineGCA,
X7vsGCA = lineX7-lineGCA,
X76vsGCA = lineX76-lineGCA,
X77vsGCA = lineX77-lineGCA,
X8vsGCA = lineX8-lineGCA,
X9vsGCA = lineX9-lineGCA,
levels=colnames(design)
)
contr.matrix
#voom mean-variance trend
v <- voom(x, design,plot=TRUE)
v
#linear models for comparisons
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit,contrasts=contr.matrix)
#in my analysis, get rid of the eBayes part and see if it helps increase the number of DE genes
efit <- eBayes(vfit)
plotSA(efit)
#looking at the number of DE genes
summary(decideTests(efit))
et <- decideTests(efit)
#can use log-FC above or below certain value to make the cutoff stricter
#use treat for this
#do not use
#tfit <- treat(vfit,lfc=1)
#dt <- decideTests(tfit)
#summary(dt)
#can find commonly DE genes (this is between line 11 and line 112)
de.common <- which(et[,2]!=0 & et[,3]!=0)
length(de.common)
#4 common DE genes
head(efit$genes$GENENAME[de.common],n=20)
vennDiagram(et[,2:3], circle.col=c("turquoise","salmon"))
write.fit(efit, dt, file="results11.112.txt")
write.fit(efit, et, file="results11.112.txt")
#make a design matrix
#this is under the assumption that the data is normally distributed
design <- model.matrix(~0+line+ploidy+group)
colnames(design) <- gsub("group","",colnames(design))
design
#make contrasts matrix
contr.matrix <- makeContrasts(
X1vsGCA = lineX1-lineGCA,
X11vsGCA = lineX11-lineGCA,
X112vsMAnc = lineX112-lineMAA,
X115vsMAnc = lineX115-lineMAA,
X117vsMAnc = lineX117-lineMAA,
X123vsMAnc = lineX123-lineMAA,
X141vsMAnc= lineX141-lineMAA,
X152vsMAnc = lineX152-lineMAA,
X18vsGCA = lineX18-lineGCA,
X2vsGCA = lineX2-lineGCA,
X21vsGCA = lineX21-lineGCA,
X29vsMAnc = lineX29-lineMAA,
X3vsGCA = lineX3-lineGCA,
X31vsGCA = lineX31-lineGCA,
X4vsGCA = lineX4-lineGCA,
X49vsGCA = lineX49-lineGCA,
X5vsGCA = lineX5-lineGCA,
X50vsMAnc = lineX50-lineMAA,
X59vsGCA = lineX59-lineGCA,
X6vsGCA = lineX6-lineGCA,
X61vsGCA = lineX61-lineGCA,
X66vsGCA = lineX66-lineGCA,
X69vsGCA = lineX69-lineGCA,
X7vsGCA = lineX7-lineGCA,
X76vsGCA = lineX76-lineGCA,
X77vsGCA = lineX77-lineGCA,
X8vsGCA = lineX8-lineGCA,
X9vsGCA = lineX9-lineGCA,
levels=colnames(design)
)
contr.matrix
#voom mean-variance trend
v <- voom(x, design,plot=TRUE)
v
#linear models for comparisons
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit,contrasts=contr.matrix)
#in my analysis, get rid of the eBayes part and see if it helps increase the number of DE genes
efit <- eBayes(vfit)
plotSA(efit)
#looking at the number of DE genes
summary(decideTests(efit))
et <- decideTests(efit)
#can use log-FC above or below certain value to make the cutoff stricter
#use treat for this
#do not use
#tfit <- treat(vfit,lfc=1)
#dt <- decideTests(tfit)
#summary(dt)
#can find commonly DE genes (this is between line 11 and line 112)
de.common <- which(et[,2]!=0 & et[,3]!=0)
length(de.common)
#4 common DE genes
head(efit$genes$GENENAME[de.common],n=20)
vennDiagram(et[,2:3], circle.col=c("turquoise","salmon"))
write.fit(efit, et, file="results11.112.txt")
#looking at individual DE genes from top to bottom
X112vsMAA <- topTable(efit, coef=3, n=Inf)
#can use TopTable for eBayes stuff
#not sure what to use for non eBayes or Treat stuff
X11vsGCA <- topTreat(efit, coef=2, n=Inf)
head(X11vsGCA)
head(basal.vs.ml)
#make a design matrix
#this is under the assumption that the data is normally distributed
design <- model.matrix(~0+line+ploidy+group)
colnames(design) <- gsub("group","",colnames(design))
design
#make contrasts matrix
contr.matrix <- makeContrasts(
X1vsGCA = lineX1-lineGCA,
X11vsGCA = lineX11-lineGCA,
X112vsMAnc = lineX112-lineMAA,
X115vsMAnc = lineX115-lineMAA,
X117vsMAnc = lineX117-lineMAA,
X123vsMAnc = lineX123-lineMAA,
X141vsMAnc= lineX141-lineMAA,
X152vsMAnc = lineX152-lineMAA,
X18vsGCA = lineX18-lineGCA,
X2vsGCA = lineX2-lineGCA,
X21vsGCA = lineX21-lineGCA,
X29vsMAnc = lineX29-lineMAA,
X3vsGCA = lineX3-lineGCA,
X31vsGCA = lineX31-lineGCA,
X4vsGCA = lineX4-lineGCA,
X49vsGCA = lineX49-lineGCA,
X5vsGCA = lineX5-lineGCA,
X50vsMAnc = lineX50-lineMAA,
X59vsGCA = lineX59-lineGCA,
X6vsGCA = lineX6-lineGCA,
X61vsGCA = lineX61-lineGCA,
X66vsGCA = lineX66-lineGCA,
X69vsGCA = lineX69-lineGCA,
X7vsGCA = lineX7-lineGCA,
X76vsGCA = lineX76-lineGCA,
X77vsGCA = lineX77-lineGCA,
X8vsGCA = lineX8-lineGCA,
X9vsGCA = lineX9-lineGCA,
levels=colnames(design)
)
contr.matrix
#voom mean-variance trend
v <- voom(x, design,plot=TRUE)
v
#linear models for comparisons
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit,contrasts=contr.matrix)
#in my analysis, get rid of the eBayes part and see if it helps increase the number of DE genes
efit <- eBayes(vfit)
plotSA(efit)
#looking at the number of DE genes
summary(decideTests(efit))
et <- decideTests(efit)
#can use log-FC above or below certain value to make the cutoff stricter
#use treat for this
#do not use
#tfit <- treat(vfit,lfc=1)
#dt <- decideTests(tfit)
#summary(dt)
#can find commonly DE genes (this is between line 11 and line 112)
de.common <- which(et[,2]!=0 & et[,3]!=0)
length(de.common)
#4 common DE genes
head(efit$genes$GENENAME[de.common],n=20)
vennDiagram(et[,2:3], circle.col=c("turquoise","salmon"))
write.fit(efit, et, file="results11.112.txt")
#looking at individual DE genes from top to bottom
X112vsMAA <- topTable(efit, coef=3, n=Inf)
#can use TopTable for eBayes stuff
#not sure what to use for non eBayes or Treat stuff
X11vsGCA <- topTreat(efit, coef=2, n=Inf)
head(X11vsGCA)
head(X112vsMAA)
##graphical representations of DE results
#plodMD function - highlights the DE genes in a mean-variance plot
plotMD(efit, column=1, status=dt[,1],main=colnames(efit)[2],xlim=c(-8,13))
#make a design matrix
#this is under the assumption that the data is normally distributed
design <- model.matrix(~0+line+ploidy+group)
colnames(design) <- gsub("group","",colnames(design))
design
#make contrasts matrix
contr.matrix <- makeContrasts(
X1vsGCA = lineX1-lineGCA,
X11vsGCA = lineX11-lineGCA,
X112vsMAnc = lineX112-lineMAA,
X115vsMAnc = lineX115-lineMAA,
X117vsMAnc = lineX117-lineMAA,
X123vsMAnc = lineX123-lineMAA,
X141vsMAnc= lineX141-lineMAA,
X152vsMAnc = lineX152-lineMAA,
X18vsGCA = lineX18-lineGCA,
X2vsGCA = lineX2-lineGCA,
X21vsGCA = lineX21-lineGCA,
X29vsMAnc = lineX29-lineMAA,
X3vsGCA = lineX3-lineGCA,
X31vsGCA = lineX31-lineGCA,
X4vsGCA = lineX4-lineGCA,
X49vsGCA = lineX49-lineGCA,
X5vsGCA = lineX5-lineGCA,
X50vsMAnc = lineX50-lineMAA,
X59vsGCA = lineX59-lineGCA,
X6vsGCA = lineX6-lineGCA,
X61vsGCA = lineX61-lineGCA,
X66vsGCA = lineX66-lineGCA,
X69vsGCA = lineX69-lineGCA,
X7vsGCA = lineX7-lineGCA,
X76vsGCA = lineX76-lineGCA,
X77vsGCA = lineX77-lineGCA,
X8vsGCA = lineX8-lineGCA,
X9vsGCA = lineX9-lineGCA,
levels=colnames(design)
)
contr.matrix
#voom mean-variance trend
v <- voom(x, design,plot=TRUE)
v
#linear models for comparisons
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit,contrasts=contr.matrix)
#in my analysis, get rid of the eBayes part and see if it helps increase the number of DE genes
efit <- eBayes(vfit)
plotSA(efit)
#looking at the number of DE genes
summary(decideTests(efit))
et <- decideTests(efit)
#can use log-FC above or below certain value to make the cutoff stricter
#use treat for this
#do not use
#tfit <- treat(vfit,lfc=1)
#dt <- decideTests(tfit)
#summary(dt)
#can find commonly DE genes (this is between line 11 and line 112)
de.common <- which(et[,2]!=0 & et[,3]!=0)
length(de.common)
#4 common DE genes
head(efit$genes$GENENAME[de.common],n=20)
vennDiagram(et[,2:3], circle.col=c("turquoise","salmon"))
write.fit(efit, et, file="results11.112.txt")
#looking at individual DE genes from top to bottom
X112vsMAA <- topTable(efit, coef=3, n=Inf)
#can use TopTable for eBayes stuff
#not sure what to use for non eBayes or Treat stuff
X11vsGCA <- topTreat(efit, coef=2, n=Inf)
head(X11vsGCA)
head(X112vsMAA)
##graphical representations of DE results
#plodMD function - highlights the DE genes in a mean-variance plot
plotMD(efit, column=1, status=et[,1],main=colnames(efit)[2],xlim=c(-8,13))
#glimma has one too
#its interactive
glMDPlot(efit,coef=1, status=dt, main=colnames(efit)[2], id.column="GENENAME", counts=x$counts, groups=group, launch=TRUE)
glMDPlot(efit,coef=1, status=et, main=colnames(efit)[2], id.column="GENENAME", counts=x$counts, groups=group, launch=TRUE)
library(gplots)
X11.vs.anc.topgenes <- X11vsGCA$GENENAME[1:50]
i <- which(v$genes$GENENAME %in% X11.vs.anc.topgenes)
mycol <- colorpanel(1000,"blue","white","red")
heatmap.2(v$E[i,],scale="row",col=mycol, labRow=v$genes$GENENAME[i],density.info="none",dendrogram="column")
par("mar")
par(mar=c(1,1,1,1))
heatmap.2(v$E[i,],scale="row",col=mycol, labRow=v$genes$GENENAME[i],density.info="none",dendrogram="column")
v <- voom(x, design,plot=TRUE)
v
plotMD(efit, column=1, status=et[,1],main=colnames(efit)[2],xlim=c(-8,13))
v <- voom(x, design,plot=TRUE)
plotSA(efit)
columns(yeast)
head(keys(yeast, keytype="ALIAS"))
head(keys(yeast, keytype="COMMON"))
head(keys(yeast, keytype="DESCRIPTION"))
columns(yeast)
head(keys(yeast, keytype="ENSEMBL"))
head(keys(yeast, keytype="ENSEMBLPROT"))
head(keys(yeast, keytype="ENTREZID"))
head(keys(yeast, keytype="ENZYME"))
head(keys(yeast, keytype="EVIDENCE"))
head(keys(yeast, keytype="EVIDENCEALL"))
head(keys(yeast, keytype="GENENAME"))
head(keys(yeast, keytype="GO"))
head(keys(yeast, keytype="GOALL"))
head(keys(yeast, keytype="INTERPRO"))
head(keys(yeast, keytype="ONTOLOGY"))
columns(yeast)
head(keys(yeast, keytype="ORF"))
head(keys(yeast, keytype="PATH"))
head(keys(yeast, keytype="PFAM"))
head(keys(yeast, keytype="PMID"))
head(keys(yeast, keytype="REFSEQ"))
head(keys(yeast, keytype="SGD"))
head(keys(yeast, keytype="SMART"))
head(keys(yeast, keytype="UNIPROT"))
library(BSgenome.Scerevisiae.UCSC.sacCer3)
genes <- select(BSgenome.Scerevisiae.UCSC.sacCer3, keys=geneid, columns="SYMBOL","TXCHROM",keytype="GENENAME")
library(dplyr)
library(BSgenome.Scerevisiae.UCSC.sacCer3)
geneid <- rownames(x)
genes <- select(BSgenome.Scerevisiae.UCSC.sacCer3, keys=geneid, columns="SYMBOL","TXCHROM",keytype="GENENAME")
if (interactive())
vignette("GenomeSearching", package="BSgenome")
qh <- query(ah, c("sacCer2","genes"))
qh
genes2 <- qh[[which(qh$title == "SGD Genes")]]
genes2
genes <- select(genes, keys=geneid, columns="seqnames","name",keytype="name")
unique(ah$dataprovider)
ens <- query(ah, "Ensemble")
ens <- query(ah, "Ensembl")
ens
ens <- subset(ah, ah$dataprovider=="Ensembl")
ens
yeast <- query(ens, "Saccharoymces cerevisiae)")
yeast
yeast <- query(ens, "Saccharoymces cerevisiae)")[[1]]
ens$species
ens <- subset(ah, ah$dataprovider=="Ensembl", ah$species=="Saccharomyces cerevisiae")
ens$species
yeast <- query(ens, ens$species == "Saccharoymces cerevisiae)")[[1]]
yeast <-  subset(ens, ens$species == "Saccharoymces cerevisiae)")[[1]]
yeast <-  query(ens, ens$species == "Saccharoymces cerevisiae)")
yeast <-  query(ens, "Saccharoymces cerevisiae")[[`]]
enter
)
clear
flflfd
]
)
))
knitr::opts_chunk$set(echo = TRUE)
files <- list.files(path="/Users/hollymcqueary/Dropbox/McQueary/Dosage-Compensation/Indiv_Genes/HTseq/Holly_Seq/",pattern = "*.txt", full.names = TRUE)
files
library(limma)
library(edgeR)
library(dplyr)
x <- readDGE(files,columns=c(1,2))
class(x)
dim(x)
files
samplenames1 <- c("112A","112B","112C","115A","115B","115C","117A","117B","117C","11B","11C","123A","123B","123C","141A","141B","141C","152A","152B","152C","18","18B","18C","1A","1B","1C","21A","21C","29A","29B","29C","2A","2B","2C","31A","31B","31C","3A","3B","3C","49A","49B","49C","4A","4B","4C","50A","50B","50C","59B","59C","5A","5B","5C","61A","61B","61C","66A","66B","66C","69A","69B","69C","6A","6B","6C","76A","76B","76C","77A","77B","77C","7A","7B","7C","8A","8B","8C","9A","9B","9C","GC_Anc_A","GC_Anc_B","GC_Anc_C","MA_Anc_A","MA_Anc_B_","MA_Anc_C")
colnames(x) <-samplenames1
x
line <- c("X112","X112","X112","X115","X115","X115","X117","X117","X117","X11","X11","X123","X123","X123","X141","X141","X141","X152","X152","X152","X18","X18","X18","X1","X1","X1","X21","X21","X29","X29","X29","X2","X2","X2","X31","X31","X31","X3","X3","X3","X49","X49","X49","X4","X4","X4","X50","X50","X50","X59","X59","X5","X5","X5","X61","X61","X61","X66","X66","X66","X69","X69","X69","X6","X6","X6","X76","X76","X76","X77","X77","X77","X7","X7","X7","X8","X8","X8","X9","X9","X9","GCA","GCA","GCA","MAA","MAA","MAA")
x$samples$line <- line
group <- as.factor(rep(c("MA","GC","MA","GC","MA","GC","MA","GC","MA"), c(9,2,9,8,3,15,3,35,3)))
x$samples$group <- group
ploidy <- as.factor(rep(c("tri","eu","tri","dbl","eu","tri","dbl","tri","eu","tri","mon","eu","eu","eu","tri","eu","eu","tri","eu","tri","seg","eu","eu","tri","tri","eu","eu","eu","eu","eu"),c(3,3,3,2,3,3,3,3,3,2,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3)))
x$samples$ploidy <- ploidy
x$samples
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Scerevisiae.UCSC.sacCer3")
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Scerevisiae.UCSC.sacCer3")
library(BSgenome.Scerevisiae.UCSC.sacCer3)
geneid <- rownames(x)
genes <- select(BSgenome.Scerevisiae.UCSC.sacCer3, keys=geneid, columns="SYMBOL","TXCHROM",keytype="GENENAME")
biocLite("AnnotationHub")
library(AnnotationHub)
ah <- AnnotationHub()
unique(ah$dataprovider)
ens <- query(ah, "Ensembl")
ens
ens <- subset(ah, ah$dataprovider=="Ensembl")
ens
ens$species
yeast <-  query(ens, "Saccharoymces cerevisiae")[[1]]
yeast <-  query(ens, "Saccharoymces cerevisiae")
yeast
orgs <- subset(ah, ah$rdataclass == "OrgDb")
orgs <- subset(ah, ah$rdataclass == "OrgDb")
orgs
BSgenome.Scerevisiae.UCSC.sacCer3
genome <- BSgenome.Scerevisiae.UCSC.sacCer3
keytypes(genome)
columns(genome)
source("https://bioconductor.org/biocLite.R")
biocLite("OrganismDbi")
library(Saccharomyces.cerevisiae)
library(BSgenome.Scerevisiae.UCSC.sacCer3)
library(OrganismDbi)
library("Saccharomyces cerevisiae")
library(Saccharomyces.cerevisiae)
library(org.Sc.sgd.db)
biocLite("BSgenome.Scerevisiae.UCSC.sacCer1")
library(BSgenome.Scerevisiae.UCSC.sacCer1)
keytypes(BSgenome.Scerevisiae.UCSC.sacCer1)
library(org.Sc.sgd.db)
install.packages("org.Sc.sgd.db")
source("https://bioconductor.org/biocLite.R")
biocLite("org.Sc.sgd.db")
library(org.Sc.sgd.db)
keytypes(org.Sc.sgd())
keytypes(org.Sc.sgd
genome <- BSgenome.Scerevisiae.UCSC.sacCer3
keytypes(org.Sc.sgd)
genes <- select(org.Sc.sgd.db, keys=geneid, columns="CHR","CHRLENGTHS","ENSEMBL",keytype="GENENAME")
yeast <- org.Sc.sgd.db
yeast <-  query(yeast, "Saccharoymces cerevisiae")
keytypes(yeast)
columns(yeast)
