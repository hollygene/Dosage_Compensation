title(main="B. Filtered Data", xlab="log-cpm")
abline(v=0, lty=3)
for (i in 2:nsamples) {
den <- density(lcpm[,i])
lines(den$x,den$y,col=col[i],lwd=2)
}
legend("topright",samplenames1,text.col=col,bty="n",cex=0.4,ncol=4)
}
#normalization
x2 <- calcNormFactors(x2, method="TMM")
x2$samples$norm.factors
#visually see the data normalized by screwing with the data artificially to make it look a lot different
x3 <- x
x3$samples$norm.factors <- 1
x3$counts[,1] <- ceiling(x3$counts[,1]*0.05)
x3$counts[,2] <- x$counts[,2]*5
par(mfrow=c(1,2))
{
par(mfrow=c(1,2))
lcpm <- cpm(x3,log=TRUE)
boxplot(lcpm,las=2,col=col,main="")
title(main="A. Example: unnormalized data",ylab="Log-cpm")
x4 <- calcNormFactors(x3)
lcpm.4 <- cpm(x4, log=TRUE)
boxplot(lcpm.4,las=2, col=col, main="")
title(main="B. Example: normalized data", ylab="Log-cpm")
}
# all of these are the line compared to its respective ancestor
levels(x2$samples$group)
#estimate dispersion
design <- model.matrix(~group)
design
#x <- estimateDisp(x2)
x2 <- estimateCommonDisp(x2, prior.df=20)
x2 <- estimateTagwiseDisp(x2, prior.df=20)
#calculate SD of each gene among replicates
etG1 <- exactTest(x, pair= c("G1","GA"),dispersion="common")
# all of these are the line compared to its respective ancestor
levels(x2$samples$group)
#estimate dispersion
design <- model.matrix(~group)
design
#x <- estimateDisp(x2)
x <- estimateCommonDisp(x2, prior.df=20)
x <- estimateTagwiseDisp(x2, prior.df=20)
#calculate SD of each gene among replicates
etG1 <- exactTest(x, pair= c("G1","GA"),dispersion="common")
View(topTags(etG1,adjust.method="fdr",n=4000,p.value=0.01))
G1 <- (etG1$table)
write.csv(G1, file = "G1_table_trended.csv")
etG11 <- exactTest(x, pair= c("G11","GA"),dispersion="common")
topTags(etG11, adjust.method="BH")
etG18 <- exactTest(x, pair= c("G18","GA"),dispersion="trended")
x <- estimateDisp(x2,prior.df=20)
# all of these are the line compared to its respective ancestor
levels(x2$samples$group)
#estimate dispersion
design <- model.matrix(~group)
design
x <- estimateDisp(x2,prior.df=20)
x <- estimateCommonDisp(x2, prior.df=20)
# all of these are the line compared to its respective ancestor
levels(x2$samples$group)
#estimate dispersion
design <- model.matrix(~group)
design
x <- estimateDisp(x2,prior.df=20)
#x <- estimateCommonDisp(x2, prior.df=20)
#x <- estimateTagwiseDisp(x2, prior.df=20)
#calculate SD of each gene among replicates
etG1 <- exactTest(x, pair= c("G1","GA"),dispersion="common")
View(topTags(etG1,adjust.method="fdr",n=4000,p.value=0.01))
G1 <- (etG1$table)
write.csv(G1, file = "G1_table_trended.csv")
etG11 <- exactTest(x, pair= c("G11","GA"),dispersion="common")
topTags(etG11, adjust.method="BH")
etG18 <- exactTest(x, pair= c("G18","GA"),dispersion="trended")
topTags(etG18, adjust.method="BH")
etG2 <- exactTest(x, pair= c("G2","GA"),dispersion="trended")
topTags(etG2, adjust.method="BH")
etG21 <- exactTest(x, pair= c("G21","GA"),dispersion="trended")
topTags(etG21, adjust.method="BH")
etG3 <- exactTest(x, pair= c("G3","GA"),dispersion="trended")
topTags(etG3, adjust.method="BH")
etG31 <- exactTest(x, pair= c("G31","GA"),dispersion="trended")
topTags(etG31, adjust.method="fdr")
etG4 <- exactTest(x, pair= c("G4","GA"),dispersion="trended")
topTags(etG4, adjust.method="BH")
etG49 <- exactTest(x, pair= c("G49","GA"),dispersion="trended")
topTags(etG49, adjust.method="BH")
etG5 <- exactTest(x, pair= c("G5","GA"),dispersion="trended")
topTags(etG5, adjust.method="BH")
etG59 <- exactTest(x, pair= c("G59","GA"),dispersion="trended")
topTags(etG59, adjust.method="BH")
etG6 <- exactTest(x, pair= c("G6","GA"),dispersion="trended")
topTags(etG6, adjust.method="BH")
etG61 <- exactTest(x, pair= c("G61","GA"),dispersion="trended")
topTags(etG61, adjust.method="BH")
etG66 <- exactTest(x, pair= c("G66","GA"),dispersion="trended")
topTags(etG66, adjust.method="BH")
etG69 <- exactTest(x, pair= c("G69","GA"),dispersion="trended")
topTags(etG69, adjust.method="BH")
etG7 <- exactTest(x, pair= c("G7","GA"),dispersion="trended")
topTags(etG7, adjust.method="BH")
etG76 <- exactTest(x, pair= c("G76","GA"),dispersion="trended")
topTags(etG76, adjust.method="BH")
etG77 <- exactTest(x, pair= c("G77","GA"),dispersion="trended")
topTags(etG77, adjust.method="BH")
etG8 <- exactTest(x, pair= c("G8","GA"),dispersion="trended")
topTags(etG8, adjust.method="BH")
etG9 <- exactTest(x, pair= c("G9","GA"),dispersion="trended")
topTags(etG9, adjust.method="BH")
#G1,2,3,5,6,9, are euploid
#also 31, 69
#commonly DE genes in aneuploid lines (for whatever chromosome), not including genes that are DE in euploid lines
common.de.aneu <- which(etG4$table$PValue<0.05 & etG7$table$PValue<0.05 & etG8$table$PValue<0.05 & etG11$table$PValue<0.05 & etG18$table$PValue<0.05 & etG21$table$PValue<0.05 & etG49$table$PValue<0.05 & etG59$table$PValue<0.05 & etG61$table$PValue<0.05 & etG66$table$PValue<0.05 & etG76$table$PValue<0.05 & etG77$table$PValue<0.05 & etG1$table$PValue>0.05 & etG2$table$PValue>0.05 & etG3$table$PValue>0.05 & etG5$table$PValue>0.05 & etG6$table$PValue>0.05 & etG9$table$PValue>0.05 & etG31$table$PValue>0.05 & etG69$table$PValue>0.05)
length(common.de.aneu)
#okay so no common de genes across aneuploids for different chromosomes that are not also differentially expressed in the euploid lines
#what about lines aneuploid for the same chromosome
#chromosomes the same:
#1: 7, 18, 21
common.de.aneu <- which(etG7$table$PValue<0.05 & etG18$table$PValue<0.05 & etG21$table$PValue<0.05 & etG1$table$PValue>0.05 & etG2$table$PValue>0.05 & etG3$table$PValue>0.05 & etG5$table$PValue>0.05 & etG6$table$PValue>0.05 & etG9$table$PValue>0.05 & etG31$table$PValue>0.05 & etG69$table$PValue>0.05)
head(etG7$genes$GENEID[common.de.aneu],n=3)
vennDiagram(et[,2:3], circle.col=c("turquoise","salmon"))
etM29 <- exactTest(x, pair= c("M29","MA"),dispersion="trended")
topTags(etM29, adjust.method="BH")
etM50 <- exactTest(x, pair= c("M50","MA"),dispersion="trended")
topTags(etM50, adjust.method="BH")
etM112 <- exactTest(x, pair= c("M112","MA"),dispersion="trended")
topTags(etM112, adjust.method="BH")
etM115 <- exactTest(x, pair= c("M115","MA"),dispersion="trended")
topTags(etM115, adjust.method="BH")
etM117 <- exactTest(x, pair= c("M117","MA"),dispersion="trended")
topTags(etM117, adjust.method="BH")
etM123 <- exactTest(x, pair= c("M123","MA"),dispersion="trended")
topTags(etM123, adjust.method="BH")
etM141 <- exactTest(x, pair= c("M141","MA"),dispersion="trended")
topTags(etM141, adjust.method="fdr",n=100,p.value=0.01)
etM152 <- exactTest(x, pair= c("M152","MA"),dispersion="trended")
topTags(etM152, adjust.method="BH")
etM1 <- exactTest(x, pair= c("M1","OMA"),dispersion="trended")
topTags(etM1, adjust.method="BH")
etM2 <- exactTest(x, pair= c("M2","OMA"),dispersion="trended")
topTags(etM2, adjust.method="BH")
etM3 <- exactTest(x, pair= c("M3","OMA"),dispersion="trended")
topTags(etM3, adjust.method="BH")
etM4 <- exactTest(x, pair= c("M4","OMA"),dispersion="trended")
topTags(etM4, adjust.method="BH")
etM5 <- exactTest(x, pair= c("M5","OMA"),dispersion="trended")
topTags(etM5, adjust.method="BH")
etM6 <- exactTest(x, pair= c("M6","OMA"),dispersion="trended")
topTags(etM6, adjust.method="BH")
etM7 <- exactTest(x, pair= c("M7","OMA"),dispersion="trended")
topTags(etM7, adjust.method="BH")
etM8 <- exactTest(x, pair= c("M8","OMA"),dispersion="trended")
topTags(etM8, adjust.method="BH")
etM9 <- exactTest(x, pair= c("M9","OMA"),dispersion="trended")
topTags(etM9, adjust.method="BH")
etM11 <- exactTest(x, pair= c("M11","OMA"),dispersion="trended")
topTags(etM11, adjust.method="BH")
etM15 <- exactTest(x, pair= c("M15","OMA"),dispersion="trended")
topTags(etM15, adjust.method="BH")
etM28 <- exactTest(x, pair= c("M28","OMA"),dispersion="trended")
topTags(etM28, adjust.method="BH")
etM88 <- exactTest(x, pair= c("M88","OMA"),dispersion="trended")
topTags(etM88, adjust.method="BH")
etM108 <- exactTest(x, pair= c("M108","OMA"),dispersion="trended")
topTags(etM108, adjust.method="BH")
etM119 <- exactTest(x, pair= c("M119","OMA"),dispersion="trended")
topTags(etM119, adjust.method="BH")
X1vsGCA <- topTable(efit, coef=1, n=Inf,p=0.05)
#make a design matrix
#this is under the assumption that the data is normally distributed
#maybe just use the modeling for when I want to compare lines with same aneuploidies from different batches (to eliminate batch effects?)
#although maybe I do want "batch effects" because they're really not batch effects they're biological because they have different heterozygosity levels?
View(x$counts)
design <- model.matrix(~0+group)
design
x
#make contrasts matrix
contr.matrix <- makeContrasts(
X1vsGCA = groupG1-groupGA,
X11vsGCA = groupG11-groupGA,
X112vsMAnc = groupM112-groupMA,
X115vsMAnc = groupM115-groupMA,
X117vsMAnc = groupM117-groupMA,
X123vsMAnc = groupM123-groupMA,
X141vsMAnc= groupM141-groupMA,
X152vsMAnc = groupM152-groupMA,
X18vsGCA = groupG18-groupGA,
X2vsGCA = groupG2-groupGA,
X21vsGCA = groupG21-groupGA,
X29vsMAnc = groupM29-groupMA,
X3vsGCA = groupG3-groupGA,
X31vsGCA = groupG31-groupGA,
X4vsGCA = groupG4-groupGA,
X49vsGCA = groupG49-groupGA,
X5vsGCA = groupG5-groupGA,
X50vsMAnc = groupM50-groupMA,
X59vsGCA = groupG59-groupGA,
X6vsGCA = groupG6-groupGA,
X61vsGCA = groupG61-groupGA,
X66vsGCA = groupG66-groupGA,
X69vsGCA = groupG69-groupGA,
X7vsGCA = groupG7-groupGA,
X76vsGCA = groupG76-groupGA,
X77vsGCA = groupG77-groupGA,
X8vsGCA = groupG8-groupGA,
X9vsGCA = groupG9-groupGA,
GCAvsMAA = groupGA-groupMA,
M1vsMA = groupM1-groupOMA,
M2vsMA = groupM2-groupOMA,
M3vsMA = groupM3-groupOMA,
M4vsMA = groupM4-groupOMA,
M5vsMA = groupM5-groupOMA,
M6vsMA = groupM6-groupOMA,
M7vsMA = groupM7-groupOMA,
M8vsMA = groupM8-groupOMA,
M9vsMA = groupM9-groupOMA,
M11vsMA = groupM11-groupOMA,
M15vsMA = groupM15-groupOMA,
M28vsMA = groupM28-groupOMA,
M88vsMA = groupM88-groupOMA,
M108vsMA = groupM108-groupOMA,
M119vsMA = groupM119-groupOMA,
levels=colnames(design)
)
contr.matrix
x$samples$group
#voom mean-variance trend
v <- voom(x, design,plot=TRUE)
v
# (DE in all aneuploid)  NOT (DE in all euploid lines)
# indices of (DE in all aneuploid)
# vector of line names such that numbers
#vector of line names in order
lab_strain <- c("M119vsMA",	"M2vsMA",	"M7vsMA",	"X117vsMAnc",	"X115vsMAnc",	"X152vsMAnc",	"X29vsMAnc",	"M11vsMA",	"M3vsMA",	"M88vsMA",	"X50vsMAnc",	"M15vsMA",	"M4vsMA",	"M8vsMA",	"M1vsMA",	"M5vsMA",	"M9vsMA",	"X141vsMAnc",	"M108vsMA",	"M28vsMA",	"M6vsMA",	"X112vsMAA",	"X123vsMAnc")
hybrid <-  c("X5vsGCA",	"X76vsGCA",	"X18vsGCA",	"X2vsGCA",	"X49vsGCA",	"X61vsGCA",	"X77vsGCA",	"X11vsGCA",	"X1vsGCA",	"X4vsGCA",	"X66vsGCA",	"X7vsGCA",	"X21vsGCA",	"X3vsGCA",	"X59vsGCA",	"X6vsGCA",	"X9vsGCA",	"X31vsGCA",	"X69vsGCA",	"X8vsGCA")
#GC <- as.factor(c("G11","G18","G1","G2","G21","G31","G3","G49","G4","G59","G5","G61","G66","G69","G6","G76","G77","G7","G8","G9"))
#length(GC)
#MA <- as.factor(c("M112","M115","M117","M123","M141","M152","M29","M50","M1","M2","M3","M4","M5","M6","M7","M8","M9","M11","M15","M28","M88","M108","M119"))
#length(MA)
# indices of (DE in all euploid)
# set diff( all lines , intersect((DE in all aneuploid)  & (DE in all euploid lines) )
setdiff()
X1vsGCA <- topTable(efit, coef=1, n=Inf,p=0.05)
#linear models for comparisons
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit,contrasts=contr.matrix)
#in my analysis, get rid of the eBayes part and see if it helps increase the number of DE genes
efit <- eBayes(vfit)
plotSA(efit)
summary(decideTests(efit))
et <- decideTests(efit)
X1vsGCA <- topTable(efit, coef=1, n=Inf,p=0.05)
X11vsGCA <- topTable(efit, coef=2, n=Inf,p=0.05)
X112vsMAA <- topTable(efit, coef=3, n=Inf,p=0.05)
X115vsMAnc  <- topTable(efit, coef=4, n=Inf,p=0.05)
X117vsMAnc <- topTable(efit, coef=5, n=Inf,p=0.05)
X123vsMAnc <- topTable(efit, coef=6, n=Inf,p=0.05)
X141vsMAnc <- topTable(efit, coef=7, n=Inf,p=0.05)
X152vsMAnc <- topTable(efit, coef=8, n=Inf,p=0.05)
X18vsGCA <- topTable(efit, coef=9, n=Inf,p=0.05)
X2vsGCA <- topTable(efit, coef=10, n=Inf,p=0.05)
X21vsGCA <- topTable(efit, coef=11, n=Inf,p=0.05)
X29vsMAnc <- topTable(efit, coef=12, n=Inf,p=0.05)
X3vsGCA <- topTable(efit, coef=13, n=Inf,p=0.05)
X31vsGCA <- topTable(efit, coef=14, n=Inf,p=0.05)
X4vsGCA <- topTable(efit, coef=15, n=Inf,p=0.05)
X49vsGCA <- topTable(efit, coef=16, n=Inf,p=0.05)
X5vsGCA <- topTable(efit, coef=17, n=Inf,p=0.05)
X50vsMAnc <- topTable(efit, coef=18, n=Inf,p=0.05)
X59vsGCA <- topTable(efit, coef=19, n=Inf,p=0.05)
X6vsGCA <- topTable(efit, coef=20, n=Inf,p=0.05)
X61vsGCA <- topTable(efit, coef=21, n=Inf,p=0.05)
X66vsGCA <- topTable(efit, coef=22, n=Inf,p=0.05)
X69vsGCA <- topTable(efit, coef=23, n=Inf,p=0.05)
X7vsGCA <- topTable(efit, coef=24, n=Inf,p=0.05)
X76vsGCA <- topTable(efit, coef=25, n=Inf,p=0.05)
X77vsGCA <- topTable(efit, coef=26, n=Inf,p=0.05)
X8vsGCA <- topTable(efit, coef=27, n=Inf,p=0.05)
X9vsGCA <- topTable(efit, coef=28, n=Inf,p=0.05)
M1vsMA <- topTable(efit, coef=29, n=Inf,p=0.05)
M2vsMA <- topTable(efit, coef=30, n=Inf,p=0.05)
M3vsMA <- topTable(efit, coef=31, n=Inf,p=0.05)
M4vsMA  <- topTable(efit, coef=32, n=Inf,p=0.05)
M5vsMA <- topTable(efit, coef=33, n=Inf,p=0.05)
M6vsMA <- topTable(efit, coef=34, n=Inf,p=0.05)
M7vsMA <- topTable(efit, coef=35, n=Inf,p=0.05)
M8vsMA <- topTable(efit, coef=36, n=Inf,p=0.05)
M9vsMA <- topTable(efit, coef=37, n=Inf,p=0.05)
M11vsMA <- topTable(efit, coef=38, n=Inf,p=0.05)
M15vsMA <- topTable(efit, coef=39, n=Inf,p=0.05)
M28vsMA <- topTable(efit, coef=40, n=Inf,p=0.05)
M88vsMA <- topTable(efit, coef=41, n=Inf,p=0.05)
M108vsMA <- topTable(efit, coef=42, n=Inf,p=0.05)
M119vsMA <- topTable(efit, coef=43, n=Inf,p=0.05)
eval(    parse(text=paste("genes <- c(genes,unname(unlist(",hybrid[i],"$GENEID)))",sep = "")   )    )
paste("genes <- c(genes,unname(unlist(",hybrid[i],"[1])))",sep = "")
i=1
paste("genes <- c(genes,unname(unlist(",hybrid[i],"[1])))",sep = "")
eval(    parse(text=paste("genes <- c(genes,unname(unlist(",hybrid[i],"[1])))",sep = "")   )    )
genes <- unlist(genes,recursive=TRUE)
genes.interest <- genes[1:length(genes)]
genes.interest <- unlist(genes.interest)
{pdf("MD_line1.pdf")
plotMD(efit, column=1, status=et[,1],main="",xlim=c(-8,13))}
v <- voom(x, design,plot=TRUE)
plotSA(efit)
x$samples$group
x$counts
View(lcpm)
x$samples$group
groupNames <- unique(x$samples$group)
groups <- x$samples$group
groupNames
ifelse(groupNames[i] %in% group, 1, 0)
ind <- ifelse(groupNames[i] %in% group, 1, 0)
groupNames[i]
ifelse(groupNames[i] %in% groups, 1, 0)
groups
ind <- ifelse(groups %in% groupNames[i], 1, 0)
which(ind)
which(ind!=0)
View(ind)
which((ifelse(groups %in% groupNames[i], 1, 0))!=0)
ind <- which((ifelse(groups %in% groupNames[i], 1, 0))!=0)
for i in 1:length(groupNames) {
for (i in 1:length(groupNames)) {
#stringcompare groupNames[i] groups == groupNames
ind <- which((ifelse(groups %in% groupNames[i], 1, 0))!=0)
stdevs[i] <- sd(lcpm[,ind])
}
stdevs <- matrix(data=NA,nrow=nrow(lcpm),ncol=length(groupNames))
for (i in 1:length(groupNames)) {
#stringcompare groupNames[i] groups == groupNames
ind <- which((ifelse(groups %in% groupNames[i], 1, 0))!=0)
stdevs[i] <- sd(lcpm[,ind])
}
stdevs
i
i = 2
ind <- which((ifelse(groups %in% groupNames[i], 1, 0))!=0)
stdevs[,i] <- sd(lcpm[,ind])
stdevs <- matrix(data=NA,nrow=nrow(lcpm),ncol=length(groupNames))
for (i in 1:length(groupNames)) {
#stringcompare groupNames[i] groups == groupNames
ind <- which((ifelse(groups %in% groupNames[i], 1, 0))!=0)
stdevs[,i] <- sd(lcpm[,ind])
}
stdevs
lcpm[,ind]
sd(lcpm[,ind])
apply(lcpm[,ind],1,sd)
stdevs <- matrix(data=NA,nrow=nrow(lcpm),ncol=length(groupNames))
for (i in 1:length(groupNames)) {
#stringcompare groupNames[i] groups == groupNames
ind <- which((ifelse(groups %in% groupNames[i], 1, 0))!=0)
#stdevs[,i] <- sd(lcpm[,ind])
apply(lcpm[,ind],1,sd)
}
1:length(groupNames)
stdevs <- matrix(data=NA,nrow=nrow(lcpm),ncol=length(groupNames))
for (i in 1:length(groupNames)) {
#stringcompare groupNames[i] groups == groupNames
ind <- which((ifelse(groups %in% groupNames[i], 1, 0))!=0)
#stdevs[,i] <- sd(lcpm[,ind])
apply(lcpm[,ind],1,sd)
}
for (i in 17){#1:length(groupNames)) {
#stringcompare groupNames[i] groups == groupNames
ind <- which((ifelse(groups %in% groupNames[i], 1, 0))!=0)
#stdevs[,i] <- sd(lcpm[,ind])
apply(lcpm[,ind],1,sd)
}
for (i in 16){#1:length(groupNames)) {
#stringcompare groupNames[i] groups == groupNames
ind <- which((ifelse(groups %in% groupNames[i], 1, 0))!=0)
#stdevs[,i] <- sd(lcpm[,ind])
apply(lcpm[,ind],1,sd)
}
groups
groupNames
groupNames(17)
groupNames[(17)]
stdevs <- matrix(data=NA,nrow=nrow(lcpm),ncol=length(groupNames))
for (i in 16){#1:length(groupNames)) {
#stringcompare groupNames[i] groups == groupNames
if (ncol(lcpm[,ind])>1){
ind <- which((ifelse(groups %in% groupNames[i], 1, 0))!=0)
#stdevs[,i] <- sd(lcpm[,ind])
apply(lcpm[,ind],1,sd)
}
}
stdevs
length(ind)>1
stdevs <- matrix(data=NA,nrow=nrow(lcpm),ncol=length(groupNames))
for (i in 16){#1:length(groupNames)) {
#stringcompare groupNames[i] groups == groupNames
ind <- which((ifelse(groups %in% groupNames[i], 1, 0))!=0)
if (length(ind)>1){
#stdevs[,i] <- sd(lcpm[,ind])
apply(lcpm[,ind],1,sd)
}
}
stdevs
stdevs <- matrix(data=NA,nrow=nrow(lcpm),ncol=length(groupNames))
for (i in 1:length(groupNames)) {
#stringcompare groupNames[i] groups == groupNames
ind <- which((ifelse(groups %in% groupNames[i], 1, 0))!=0)
if (length(ind)>1){
#stdevs[,i] <- sd(lcpm[,ind])
apply(lcpm[,ind],1,sd)
}
}
stdevs
stdevs <- matrix(data=NA,nrow=nrow(lcpm),ncol=length(groupNames))
for (i in 1:length(groupNames)) {
#stringcompare groupNames[i] groups == groupNames
ind <- which((ifelse(groups %in% groupNames[i], 1, 0))!=0)
if (length(ind)>1){
#stdevs[,i] <- sd(lcpm[,ind])
stdevs[,i] <- apply(lcpm[,ind],1,sd)
}
}
stdevs
M119vsMA <- topTable(efit, coef=43, n=Inf)
M108vsMA <- topTable(efit, coef=42, n=Inf,p=0.05)
X1vsGCA <- topTable(efit, coef=1, n=Inf)
X11vsGCA <- topTable(efit, coef=2, n=Inf)
X112vsMAA <- topTable(efit, coef=3, n=Inf)
X115vsMAnc  <- topTable(efit, coef=4, n=Inf)
X117vsMAnc <- topTable(efit, coef=5, n=Inf)
X123vsMAnc <- topTable(efit, coef=6, n=Inf)
X141vsMAnc <- topTable(efit, coef=7, n=Inf)
X152vsMAnc <- topTable(efit, coef=8, n=Inf)
X18vsGCA <- topTable(efit, coef=9, n=Inf)
X2vsGCA <- topTable(efit, coef=10, n=Inf)
X21vsGCA <- topTable(efit, coef=11, n=Inf)
X29vsMAnc <- topTable(efit, coef=12, n=Inf)
X3vsGCA <- topTable(efit, coef=13, n=Inf)
X31vsGCA <- topTable(efit, coef=14, n=Inf)
X4vsGCA <- topTable(efit, coef=15, n=Inf)
X49vsGCA <- topTable(efit, coef=16, n=Inf)
X5vsGCA <- topTable(efit, coef=17, n=Inf)
X50vsMAnc <- topTable(efit, coef=18, n=Inf)
X59vsGCA <- topTable(efit, coef=19, n=Inf)
X6vsGCA <- topTable(efit, coef=20, n=Inf)
X61vsGCA <- topTable(efit, coef=21, n=Inf)
X66vsGCA <- topTable(efit, coef=22, n=Inf)
X69vsGCA <- topTable(efit, coef=23, n=Inf)
X7vsGCA <- topTable(efit, coef=24, n=Inf)
X76vsGCA <- topTable(efit, coef=25, n=Inf)
X77vsGCA <- topTable(efit, coef=26, n=Inf)
X8vsGCA <- topTable(efit, coef=27, n=Inf)
X9vsGCA <- topTable(efit, coef=28, n=Inf)
M1vsMA <- topTable(efit, coef=29, n=Inf)
M2vsMA <- topTable(efit, coef=30, n=Inf)
M3vsMA <- topTable(efit, coef=31, n=Inf)
M4vsMA  <- topTable(efit, coef=32, n=Inf)
M5vsMA <- topTable(efit, coef=33, n=Inf)
M6vsMA <- topTable(efit, coef=34, n=Inf)
M7vsMA <- topTable(efit, coef=35, n=Inf)
M8vsMA <- topTable(efit, coef=36, n=Inf)
M9vsMA <- topTable(efit, coef=37, n=Inf)
M11vsMA <- topTable(efit, coef=38, n=Inf)
M15vsMA <- topTable(efit, coef=39, n=Inf)
M28vsMA <- topTable(efit, coef=40, n=Inf)
M88vsMA <- topTable(efit, coef=41, n=Inf)
M108vsMA <- topTable(efit, coef=42, n=Inf)
M119vsMA <- topTable(efit, coef=43, n=Inf)
stdevs
groups
groupnames
groupNames
(stdevs %in% groupNames[M108])
M119vsMA
View(M119vsMA)
p.vals <- c(M108vsMA$P.Value,M119vsMA$P.Value)
p.vals
paste("DE_",i," <- topTable(efit, coef=",i", n=Inf)",sep="")
paste("DE_",toString(i)," <- topTable(efit, coef=",toString(i),", n=Inf)",sep="")
for (i in 1:43){
eval( parse(text = paste("DE_",toString(i)," <- topTable(efit, coef=",toString(i),", n=Inf)",sep="")))
}
setdiff(ancestors,groupNames)
ancestors = c("GA","MA","OMA");
setdiff(ancestors,groupNames)
setdiff(groupNames,ancestors)
groupNamesNoAncestors = setdiff(groupNames,ancestors)
groupNames <- unique(x$samples$group)
ancestors = c("GA","MA","OMA");
groupNamesNoAncestors = setdiff(groupNames,ancestors)
stdevs <- matrix(data=NA,nrow=nrow(lcpm),ncol=length(groupNamesNoAncestors))
for (i in 1:length(groupNamesNoAncestors)) {
ind <- which((ifelse(groups %in% groupNamesNoAncestors[i], 1, 0))!=0)
if (length(ind)>1){
#stdevs[,i] <- sd(lcpm[,ind])
stdevs[,i] <- apply(lcpm[,ind],1,sd)
}
}
stdevs
groupNames
lines <- (X1	X11	X112	X115	X117	X123	X141	X152	X18	X2	X21	X29	X3	X31	X4	X49	X5	X50	X59	X6	X61	X66	X69	X7	X76	X77	X8	X9	M1	M2	M3	M4	M5	M6	M7	M8	M9	M11	M15	M28	M88	M108	M119)
lines <- c(X1,X11,X112,X115,X117,X123,X141,X152,X18,X2,X21,X29,X3,X31,X4,X49,X5,X50,X59,X6,X61,X66,X69,X7,X76,X77,X8,X9,M1,M2,M3,M4,M5,M6,M7,M8,M9,M11,M15,M28,M88,M108,M119)
lines <- c("X1","X11","X112","X115","X117","X123","X141","X152","X18","X2","X21","X29","X3","X31","X4","X49","X5","X50","X59","X6","X61","X66","X69","X7","X76","X77","X8","X9","M1","M2","M3","M4","M5","M6","M7","M8","M9","M11","M15","M28","M88","M108","M119")
lines <- gsub("X", "G", lines)
lines
glMDPlot(efit,coef=7, status=et[,7], main=colnames(efit)[7], id.column="GENENAME", counts=x$counts, groups=group, launch=TRUE)
library(glimma)
library(Glimma)
glMDPlot(efit,coef=7, status=et[,7], main=colnames(efit)[7], id.column="GENENAME", counts=x$counts, groups=group, launch=TRUE)
